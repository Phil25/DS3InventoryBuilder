#include <gtest/gtest.h>
#include <Calculator.h>
using namespace invbuilder;
class Lowest_1_1_1_1_1 : public ::testing::Test{
protected:
static Database db;
static PlayerAttributes attribs;
};
Database Lowest_1_1_1_1_1::db = Database::Create();
PlayerAttributes Lowest_1_1_1_1_1::attribs = {1.f,1.f,1.f,1.f,1.f};


TEST_F(Lowest_1_1_1_1_1, Ancient_Dragon_Greatshield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Ancient Dragon Greatshield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Anris_Straight_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Anri's Straight Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Aquamarine_Dagger_None){
const auto& [damage, status] = calculator::AttackRating(db, "Aquamarine Dagger", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(70, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Arbalest_None){
const auto& [damage, status] = calculator::AttackRating(db, "Arbalest", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(163, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Archdeacons_Great_Staff_None){
const auto& [damage, status] = calculator::AttackRating(db, "Archdeacon's Great Staff", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Arstors_Spear_None){
const auto& [damage, status] = calculator::AttackRating(db, "Arstor's Spear", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(129, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(158, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Greatsword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Greatsword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(73, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Greatsword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(146, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Greatsword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(165, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Greatsword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(146, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Greatsword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(152, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(253, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Greatsword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(152, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(253, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Greatsword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(146, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Greatsword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(150, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Greatsword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(165, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Greatsword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(96, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Greatsword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(252, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Greatsword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(142, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Greatsword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(146, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Greatsword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(146, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Straight_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(154, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Straight_Sword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(94, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Straight_Sword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Straight_Sword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(83, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Straight_Sword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(94, static_cast<int>(damage.physical));EXPECT_EQ(157, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Straight_Sword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(83, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Straight_Sword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(115, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Straight_Sword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(115, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Straight_Sword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(143, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Straight_Sword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(147, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Straight_Sword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(94, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(94, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Straight_Sword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Straight_Sword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(180, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Straight_Sword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(139, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Straight_Sword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(143, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Astora_Straight_Sword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(139, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Avelyn_None){
const auto& [damage, status] = calculator::AttackRating(db, "Avelyn", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bandits_Knife_None){
const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(94, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bandits_Knife_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(61, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bandits_Knife_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bandits_Knife_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(102, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bandits_Knife_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(115, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bandits_Knife_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(102, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bandits_Knife_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(146, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bandits_Knife_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(146, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bandits_Knife_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bandits_Knife_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(90, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bandits_Knife_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(115, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bandits_Knife_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bandits_Knife_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bandits_Knife_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bandits_Knife_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bandits_Knife_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(52, static_cast<int>(damage.physical));EXPECT_EQ(90, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Barbed_Straight_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(133, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Barbed_Straight_Sword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Barbed_Straight_Sword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Barbed_Straight_Sword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(119, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Barbed_Straight_Sword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(135, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Barbed_Straight_Sword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(119, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Barbed_Straight_Sword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(194, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Barbed_Straight_Sword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(194, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Barbed_Straight_Sword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Barbed_Straight_Sword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Barbed_Straight_Sword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(135, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Barbed_Straight_Sword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Barbed_Straight_Sword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(171, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Barbed_Straight_Sword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Barbed_Straight_Sword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Barbed_Straight_Sword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(119, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bastard_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(165, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bastard_Sword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bastard_Sword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(128, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bastard_Sword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(154, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bastard_Sword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(174, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bastard_Sword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(154, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bastard_Sword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(139, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(233, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bastard_Sword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(139, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(233, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bastard_Sword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(153, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bastard_Sword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(157, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bastard_Sword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(174, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bastard_Sword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(128, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bastard_Sword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(224, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bastard_Sword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(149, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bastard_Sword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(153, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bastard_Sword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(154, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Battle_Axe_None){
const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(150, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Battle_Axe_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Battle_Axe_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Battle_Axe_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(138, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Battle_Axe_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(156, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Battle_Axe_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(141, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Battle_Axe_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(125, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(209, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Battle_Axe_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(203, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Battle_Axe_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Battle_Axe_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(142, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Battle_Axe_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(159, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Battle_Axe_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Battle_Axe_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(198, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Battle_Axe_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(131, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Battle_Axe_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Battle_Axe_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(138, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Blade_None){
const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(146, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Blade_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Blade_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(113, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Blade_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(132, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Blade_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(149, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Blade_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(132, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Blade_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(207, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Blade_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(207, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Blade_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(135, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Blade_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(139, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Blade_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(149, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Blade_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(113, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Blade_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(184, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Blade_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(131, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Blade_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(135, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Blade_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(132, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Bow_of_Pharis_None){
const auto& [damage, status] = calculator::AttackRating(db, "Black Bow of Pharis", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Iron_Greatshield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(134, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Iron_Greatshield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Iron_Greatshield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Iron_Greatshield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(134, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Iron_Greatshield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(152, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Iron_Greatshield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(134, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Iron_Greatshield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(107, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(179, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Iron_Greatshield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(107, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(179, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Iron_Greatshield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Iron_Greatshield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Iron_Greatshield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(152, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Iron_Greatshield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Iron_Greatshield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(174, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Iron_Greatshield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Iron_Greatshield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Iron_Greatshield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(134, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Knight_Glaive_None){
const auto& [damage, status] = calculator::AttackRating(db, "Black Knight Glaive", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(166, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Knight_Greataxe_None){
const auto& [damage, status] = calculator::AttackRating(db, "Black Knight Greataxe", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(210, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Knight_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Black Knight Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(193, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Knight_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Black Knight Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(118, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Black_Knight_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Black Knight Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(181, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blacksmith_Hammer_None){
const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blacksmith_Hammer_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blacksmith_Hammer_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blacksmith_Hammer_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(129, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blacksmith_Hammer_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(146, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blacksmith_Hammer_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(129, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blacksmith_Hammer_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(125, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(209, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blacksmith_Hammer_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(125, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(209, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blacksmith_Hammer_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blacksmith_Hammer_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blacksmith_Hammer_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(146, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blacksmith_Hammer_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blacksmith_Hammer_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(191, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blacksmith_Hammer_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blacksmith_Hammer_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blacksmith_Hammer_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(129, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bloodlust_None){
const auto& [damage, status] = calculator::AttackRating(db, "Bloodlust", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(110, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(34, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blue_Wooden_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blue_Wooden_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blue_Wooden_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blue_Wooden_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(56, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(98, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blue_Wooden_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(111, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blue_Wooden_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(56, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(98, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blue_Wooden_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(123, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blue_Wooden_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(123, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blue_Wooden_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blue_Wooden_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blue_Wooden_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(111, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blue_Wooden_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blue_Wooden_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blue_Wooden_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blue_Wooden_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Blue_Wooden_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(56, static_cast<int>(damage.physical));EXPECT_EQ(98, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bonewheel_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(133, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bonewheel_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(90, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bonewheel_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bonewheel_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(133, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bonewheel_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(90, static_cast<int>(damage.physical));EXPECT_EQ(150, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bonewheel_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(133, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bonewheel_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(177, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bonewheel_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(177, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bonewheel_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bonewheel_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bonewheel_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(90, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(150, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bonewheel_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bonewheel_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(173, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bonewheel_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bonewheel_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Bonewheel_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(133, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Axe_None){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(148, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Axe_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Axe_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Axe_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(140, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Axe_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(158, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Axe_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(136, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Axe_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(205, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Axe_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(210, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Axe_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(137, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Axe_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(141, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Axe_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(154, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Axe_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Axe_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(201, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Axe_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(130, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Axe_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(137, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Axe_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(140, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Twindaggers_None){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Twindaggers_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(63, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Twindaggers_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Twindaggers_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(54, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(94, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Twindaggers_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(63, static_cast<int>(damage.physical));EXPECT_EQ(106, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Twindaggers_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(54, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(94, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Twindaggers_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(148, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Twindaggers_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(148, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Twindaggers_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Twindaggers_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Twindaggers_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(63, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(106, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Twindaggers_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Twindaggers_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Twindaggers_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Twindaggers_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Brigand_Twindaggers_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(54, static_cast<int>(damage.physical));EXPECT_EQ(94, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broadsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(140, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broadsword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broadsword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broadsword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(128, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broadsword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(145, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broadsword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(128, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broadsword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(212, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broadsword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(212, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broadsword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(129, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broadsword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(133, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broadsword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(145, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broadsword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broadsword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(193, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broadsword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broadsword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(129, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broadsword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(128, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broken_Straight_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broken_Straight_Sword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broken_Straight_Sword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broken_Straight_Sword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(52, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(92, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broken_Straight_Sword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(104, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broken_Straight_Sword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(52, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(92, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broken_Straight_Sword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(138, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broken_Straight_Sword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(138, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broken_Straight_Sword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broken_Straight_Sword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broken_Straight_Sword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(104, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broken_Straight_Sword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broken_Straight_Sword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broken_Straight_Sword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broken_Straight_Sword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Broken_Straight_Sword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(52, static_cast<int>(damage.physical));EXPECT_EQ(92, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Buckler_None){
const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Buckler_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Buckler_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Buckler_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(48, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(85, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Buckler_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(96, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Buckler_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(48, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(85, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Buckler_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(63, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(105, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Buckler_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(63, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(105, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Buckler_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Buckler_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Buckler_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(96, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Buckler_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Buckler_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Buckler_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Buckler_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Buckler_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(48, static_cast<int>(damage.physical));EXPECT_EQ(85, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Butcher_Knife_None){
const auto& [damage, status] = calculator::AttackRating(db, "Butcher Knife", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caduceus_Round_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caduceus_Round_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caduceus_Round_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caduceus_Round_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(51, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(89, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caduceus_Round_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(101, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caduceus_Round_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(51, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(89, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caduceus_Round_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(109, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caduceus_Round_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(109, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caduceus_Round_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caduceus_Round_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caduceus_Round_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(101, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caduceus_Round_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caduceus_Round_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(107, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caduceus_Round_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caduceus_Round_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caduceus_Round_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(51, static_cast<int>(damage.physical));EXPECT_EQ(89, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caestus_None){
const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caestus_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caestus_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caestus_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(108, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caestus_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(122, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caestus_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(108, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caestus_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(177, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caestus_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(177, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caestus_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caestus_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caestus_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(122, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caestus_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caestus_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(157, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caestus_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caestus_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caestus_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(108, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Caithas_Chime_None){
const auto& [damage, status] = calculator::AttackRating(db, "Caitha's Chime", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Canvas_Talisman_None){
const auto& [damage, status] = calculator::AttackRating(db, "Canvas Talisman", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(150, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Greatsword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Greatsword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(71, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Greatsword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(141, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Greatsword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(159, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Greatsword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(141, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Greatsword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(144, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(240, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Greatsword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(144, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(240, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Greatsword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Greatsword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(142, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Greatsword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(159, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Greatsword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Greatsword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(218, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Greatsword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(135, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Greatsword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Greatsword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(141, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Sword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Sword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Sword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(115, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Sword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(130, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Sword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(115, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Sword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(185, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Sword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(185, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Sword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Sword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Sword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(130, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Sword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Sword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(163, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Sword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(113, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Sword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Curved_Sword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(115, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(55, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(52, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(46, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(81, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(55, static_cast<int>(damage.physical));EXPECT_EQ(92, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(46, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(81, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(56, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(94, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(56, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(94, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(63, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(55, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(92, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(52, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(46, static_cast<int>(damage.physical));EXPECT_EQ(81, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shotel_None){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shotel_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shotel_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shotel_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(121, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shotel_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(137, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shotel_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(121, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shotel_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(196, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shotel_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(196, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shotel_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shotel_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shotel_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(137, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shotel_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shotel_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(173, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shotel_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shotel_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Carthus_Shotel_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(121, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatshield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(134, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatshield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatshield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatshield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(134, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatshield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(152, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatshield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(134, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatshield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(107, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(179, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatshield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(107, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(179, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatshield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatshield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatshield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(152, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatshield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatshield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(174, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatshield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatshield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatshield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(134, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(178, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatsword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(112, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatsword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(73, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatsword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(165, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatsword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(112, static_cast<int>(damage.physical));EXPECT_EQ(187, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatsword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(165, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatsword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(154, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(257, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatsword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(154, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(257, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatsword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(165, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatsword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(169, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatsword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(112, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(187, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatsword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(96, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatsword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(255, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatsword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(160, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatsword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(165, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Cathedral_Knight_Greatsword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(165, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Chaos_Blade_None){
const auto& [damage, status] = calculator::AttackRating(db, "Chaos Blade", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(34, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claw_None){
const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claw_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claw_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claw_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(105, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claw_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(119, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claw_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(105, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claw_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(168, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claw_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(168, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claw_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claw_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claw_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(119, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claw_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claw_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(149, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claw_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claw_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claw_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(105, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claymore_None){
const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(165, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claymore_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claymore_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(128, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claymore_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(154, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claymore_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(174, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claymore_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(154, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claymore_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(139, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(233, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claymore_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(139, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(233, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claymore_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(153, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claymore_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(157, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claymore_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(174, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claymore_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(128, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claymore_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(224, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claymore_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(149, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claymore_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(153, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Claymore_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(154, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Clerics_Candlestick_None){
const auto& [damage, status] = calculator::AttackRating(db, "Cleric's Candlestick", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(126, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Clerics_Sacred_Chime_None){
const auto& [damage, status] = calculator::AttackRating(db, "Cleric's Sacred Chime", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Club_None){
const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(129, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Club_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Club_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(100, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Club_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(129, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Club_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(146, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Club_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(129, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Club_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(199, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Club_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(199, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Club_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Club_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Club_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(146, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Club_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(100, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Club_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(191, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Club_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Club_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Club_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(129, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Composite_Bow_None){
const auto& [damage, status] = calculator::AttackRating(db, "Composite Bow", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Corvian_Greatknife_None){
const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Corvian_Greatknife_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Corvian_Greatknife_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Corvian_Greatknife_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(118, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Corvian_Greatknife_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(133, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Corvian_Greatknife_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(118, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Corvian_Greatknife_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(153, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Corvian_Greatknife_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(153, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Corvian_Greatknife_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Corvian_Greatknife_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Corvian_Greatknife_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(133, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Corvian_Greatknife_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Corvian_Greatknife_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(134, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Corvian_Greatknife_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(100, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Corvian_Greatknife_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Corvian_Greatknife_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(118, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Court_Sorcerers_Staff_None){
const auto& [damage, status] = calculator::AttackRating(db, "Court Sorcerer's Staff", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crescent_Axe_None){
const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(142, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crescent_Axe_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crescent_Axe_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(110, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crescent_Axe_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(131, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crescent_Axe_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(148, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crescent_Axe_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(131, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crescent_Axe_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(210, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crescent_Axe_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(210, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crescent_Axe_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(132, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crescent_Axe_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(135, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crescent_Axe_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(148, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crescent_Axe_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(110, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crescent_Axe_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(193, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crescent_Axe_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(128, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crescent_Axe_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(132, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crescent_Axe_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(131, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crescent_Moon_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Crescent Moon Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(142, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crest_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Crest Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crimson_Parma_None){
const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crimson_Parma_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crimson_Parma_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crimson_Parma_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(51, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(89, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crimson_Parma_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(101, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crimson_Parma_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(51, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(89, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crimson_Parma_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(109, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crimson_Parma_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(109, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crimson_Parma_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crimson_Parma_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crimson_Parma_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(101, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crimson_Parma_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crimson_Parma_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(107, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crimson_Parma_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crimson_Parma_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crimson_Parma_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(51, static_cast<int>(damage.physical));EXPECT_EQ(89, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Quills_None){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Quills_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Quills_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Quills_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(112, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Quills_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(127, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Quills_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(112, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Quills_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(112, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(186, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Quills_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(112, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(186, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Quills_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Quills_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Quills_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(127, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Quills_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Quills_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(170, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Quills_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Quills_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Quills_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(116, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Talons_None){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Talons_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Talons_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Talons_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(111, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Talons_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(126, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Talons_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(111, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Talons_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(177, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Talons_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(177, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Talons_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Talons_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Talons_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(126, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Talons_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Talons_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(157, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Talons_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Talons_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crow_Talons_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(111, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crucifix_of_the_Mad_King_None){
const auto& [damage, status] = calculator::AttackRating(db, "Crucifix of the Mad King", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(129, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(78, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crystal_Chime_None){
const auto& [damage, status] = calculator::AttackRating(db, "Crystal Chime", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Crystal_Sages_Rapier_None){
const auto& [damage, status] = calculator::AttackRating(db, "Crystal Sage's Rapier", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(150, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Curse_Ward_Greatshield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Curse Ward Greatshield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(136, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dagger_None){
const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dagger_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dagger_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dagger_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(49, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(86, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dagger_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(97, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dagger_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(49, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(86, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dagger_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(148, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dagger_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(148, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dagger_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dagger_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dagger_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(97, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dagger_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dagger_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dagger_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dagger_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dagger_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(49, static_cast<int>(damage.physical));EXPECT_EQ(86, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dancers_Enchanted_Swords_None){
const auto& [damage, status] = calculator::AttackRating(db, "Dancer's Enchanted Swords", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(68, static_cast<int>(damage.magic));EXPECT_EQ(68, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dark_Hand_None){
const auto& [damage, status] = calculator::AttackRating(db, "Dark Hand", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(150, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dark_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(132, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dark_Sword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dark_Sword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dark_Sword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(120, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dark_Sword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(136, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dark_Sword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(120, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dark_Sword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(194, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dark_Sword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(194, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dark_Sword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dark_Sword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(125, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dark_Sword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(136, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dark_Sword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dark_Sword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(179, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dark_Sword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(118, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dark_Sword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dark_Sword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(120, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Darkdrift_None){
const auto& [damage, status] = calculator::AttackRating(db, "Darkdrift", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(140, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(34, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Darkmoon_Longbow_None){
const auto& [damage, status] = calculator::AttackRating(db, "Darkmoon Longbow", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(39, static_cast<int>(damage.physical));EXPECT_EQ(48, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Demons_Fist_None){
const auto& [damage, status] = calculator::AttackRating(db, "Demon's Fist", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(121, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(84, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Demons_Greataxe_None){
const auto& [damage, status] = calculator::AttackRating(db, "Demon's Greataxe", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(171, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(96, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Demons_Scar_None){
const auto& [damage, status] = calculator::AttackRating(db, "Demon's Scar", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(0, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(108, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragon_Crest_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Dragon Crest Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragon_Tooth_None){
const auto& [damage, status] = calculator::AttackRating(db, "Dragon Tooth", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(205, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonhead_Greatshield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonhead Greatshield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(158, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonhead_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonhead Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(13, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonrider_Bow_None){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonrider Bow", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayer_Greataxe_None){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer Greataxe", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(218, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(136, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayer_Greatbow_None){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer Greatbow", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(132, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayer_Greatshield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer Greatshield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(146, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayer_Spear_None){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer Spear", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(122, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayer_Swordspear_None){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer Swordspear", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(140, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(37, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayers_Axe_None){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(210, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayers_Axe_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(136, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayers_Axe_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(162, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayers_Axe_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(140, static_cast<int>(damage.fire));EXPECT_EQ(105, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayers_Axe_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(169, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(105, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayers_Axe_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(105, static_cast<int>(damage.lightning));EXPECT_EQ(140, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayers_Axe_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(105, static_cast<int>(damage.lightning));EXPECT_EQ(185, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayers_Axe_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(185, static_cast<int>(damage.fire));EXPECT_EQ(105, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayers_Axe_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(210, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayers_Axe_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(199, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayers_Axe_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(221, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayers_Axe_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(162, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayers_Axe_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(163, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(210, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayers_Axe_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(110, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(210, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayers_Axe_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(210, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Dragonslayers_Axe_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(149, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(105, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drakeblood_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(142, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(142, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drakeblood_Greatsword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(92, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(92, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drakeblood_Greatsword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(110, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(110, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drakeblood_Greatsword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(71, static_cast<int>(damage.magic));EXPECT_EQ(139, static_cast<int>(damage.fire));EXPECT_EQ(71, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drakeblood_Greatsword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(214, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(71, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drakeblood_Greatsword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(71, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(71, static_cast<int>(damage.lightning));EXPECT_EQ(139, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drakeblood_Greatsword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(132, static_cast<int>(damage.physical));EXPECT_EQ(71, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(71, static_cast<int>(damage.lightning));EXPECT_EQ(220, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drakeblood_Greatsword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(132, static_cast<int>(damage.physical));EXPECT_EQ(71, static_cast<int>(damage.magic));EXPECT_EQ(220, static_cast<int>(damage.fire));EXPECT_EQ(71, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drakeblood_Greatsword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(142, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(142, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drakeblood_Greatsword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(134, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(134, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drakeblood_Greatsword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(71, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(214, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drakeblood_Greatsword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(110, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(110, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drakeblood_Greatsword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(142, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(142, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drakeblood_Greatsword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(96, static_cast<int>(damage.physical));EXPECT_EQ(142, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(142, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drakeblood_Greatsword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(142, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(142, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drakeblood_Greatsword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(189, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(71, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Hammers_None){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(132, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Hammers_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Hammers_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Hammers_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(129, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Hammers_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(146, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Hammers_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(129, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Hammers_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(203, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Hammers_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(203, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Hammers_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Hammers_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(125, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Hammers_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(146, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Hammers_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Hammers_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(187, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Hammers_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Hammers_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Hammers_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(129, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Twinspears_None){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Twinspears_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Twinspears_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Twinspears_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(109, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Twinspears_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(123, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Twinspears_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(109, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Twinspears_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(185, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Twinspears_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(185, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Twinspears_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Twinspears_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Twinspears_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(123, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Twinspears_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Twinspears_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(171, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Twinspears_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Twinspears_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Drang_Twinspears_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(109, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Earth_Seeker_None){
const auto& [damage, status] = calculator::AttackRating(db, "Earth Seeker", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(168, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, EastWest_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, EastWest_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, EastWest_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, EastWest_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(56, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(97, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, EastWest_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(110, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, EastWest_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(56, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(97, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, EastWest_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(122, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, EastWest_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(122, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, EastWest_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, EastWest_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, EastWest_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(110, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, EastWest_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, EastWest_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(118, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, EastWest_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, EastWest_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, EastWest_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(56, static_cast<int>(damage.physical));EXPECT_EQ(97, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Eastern_Iron_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Eastern_Iron_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Eastern_Iron_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Eastern_Iron_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(59, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(103, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Eastern_Iron_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(117, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Eastern_Iron_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(59, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(103, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Eastern_Iron_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(131, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Eastern_Iron_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(131, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Eastern_Iron_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Eastern_Iron_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Eastern_Iron_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(117, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Eastern_Iron_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Eastern_Iron_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Eastern_Iron_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Eastern_Iron_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Eastern_Iron_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(59, static_cast<int>(damage.physical));EXPECT_EQ(103, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Eleonora_None){
const auto& [damage, status] = calculator::AttackRating(db, "Eleonora", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(170, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Elkhorn_Round_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Elkhorn_Round_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Elkhorn_Round_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Elkhorn_Round_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(51, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(89, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Elkhorn_Round_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(101, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Elkhorn_Round_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(51, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(89, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Elkhorn_Round_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(109, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Elkhorn_Round_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(109, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Elkhorn_Round_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Elkhorn_Round_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Elkhorn_Round_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(101, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Elkhorn_Round_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Elkhorn_Round_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(107, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Elkhorn_Round_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Elkhorn_Round_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Elkhorn_Round_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(51, static_cast<int>(damage.physical));EXPECT_EQ(89, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Estoc_None){
const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Estoc_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Estoc_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Estoc_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(111, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Estoc_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(126, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Estoc_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(111, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Estoc_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(183, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Estoc_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(183, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Estoc_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Estoc_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Estoc_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(126, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Estoc_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Estoc_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(162, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Estoc_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(113, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Estoc_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Estoc_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(111, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ethereal_Oak_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Ethereal Oak Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Executioners_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Executioner's Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(160, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Exile_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(177, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Exile_Greatsword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Exile_Greatsword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(137, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(73, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Exile_Greatsword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(169, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Exile_Greatsword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(191, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Exile_Greatsword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(169, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Exile_Greatsword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(158, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(264, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Exile_Greatsword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(158, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(264, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Exile_Greatsword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(164, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Exile_Greatsword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(168, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Exile_Greatsword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(191, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Exile_Greatsword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(137, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(96, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Exile_Greatsword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(254, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Exile_Greatsword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(159, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Exile_Greatsword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(164, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Exile_Greatsword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(169, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Falchion_None){
const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(140, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Falchion_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Falchion_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Falchion_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(132, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Falchion_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(149, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Falchion_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(132, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Falchion_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(212, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Falchion_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(212, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Falchion_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(129, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Falchion_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(133, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Falchion_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(149, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Falchion_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Falchion_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(202, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Falchion_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Falchion_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(129, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Falchion_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(132, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Farron_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Farron Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(154, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Firelink_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Firelink Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(140, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(97, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Flamberge_None){
const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(189, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Flamberge_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Flamberge_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(146, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(71, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Flamberge_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(177, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Flamberge_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(204, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Flamberge_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(177, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Flamberge_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(136, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(227, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Flamberge_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(136, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(227, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Flamberge_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(175, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Flamberge_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(180, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Flamberge_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(200, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Flamberge_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(146, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Flamberge_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(223, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Flamberge_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(170, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Flamberge_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(175, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Flamberge_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(180, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(36, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Javelin_None){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Javelin_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Javelin_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Javelin_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(116, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Javelin_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(131, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Javelin_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(116, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Javelin_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(196, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Javelin_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(196, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Javelin_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Javelin_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Javelin_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(131, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Javelin_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Javelin_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(180, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Javelin_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Javelin_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Javelin_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(116, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Sabre_None){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(129, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Sabre_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Sabre_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(100, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Sabre_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(118, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Sabre_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(133, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Sabre_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(118, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Sabre_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(190, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Sabre_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(190, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Sabre_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Sabre_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Sabre_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(133, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Sabre_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(100, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Sabre_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(168, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Sabre_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Sabre_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Sabre_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(118, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(100, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(61, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(106, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(120, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(61, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(106, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(136, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(136, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(120, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(131, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(90, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(61, static_cast<int>(damage.physical));EXPECT_EQ(106, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Follower_Torch_None){
const auto& [damage, status] = calculator::AttackRating(db, "Follower Torch", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(78, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, FourPronged_Plow_None){
const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, FourPronged_Plow_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, FourPronged_Plow_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, FourPronged_Plow_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(123, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, FourPronged_Plow_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(139, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, FourPronged_Plow_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(123, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, FourPronged_Plow_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(203, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, FourPronged_Plow_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(203, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, FourPronged_Plow_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, FourPronged_Plow_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, FourPronged_Plow_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(139, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, FourPronged_Plow_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, FourPronged_Plow_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(187, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, FourPronged_Plow_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(113, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, FourPronged_Plow_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, FourPronged_Plow_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(123, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Frayed_Blade_None){
const auto& [damage, status] = calculator::AttackRating(db, "Frayed Blade", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(110, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(76, static_cast<int>(damage.dark));EXPECT_EQ(34, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Friedes_Great_Scythe_None){
const auto& [damage, status] = calculator::AttackRating(db, "Friede's Great Scythe", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(84, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(45, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Fume_Ultra_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Fume Ultra Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(156, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gaels_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Gael's Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(160, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gargoyle_Flame_Hammer_None){
const auto& [damage, status] = calculator::AttackRating(db, "Gargoyle Flame Hammer", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(146, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(120, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gargoyle_Flame_Spear_None){
const auto& [damage, status] = calculator::AttackRating(db, "Gargoyle Flame Spear", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(99, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ghru_Rotshield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ghru_Rotshield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ghru_Rotshield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(44, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ghru_Rotshield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(100, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ghru_Rotshield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(113, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ghru_Rotshield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(100, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ghru_Rotshield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(125, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ghru_Rotshield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(125, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ghru_Rotshield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ghru_Rotshield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ghru_Rotshield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(113, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ghru_Rotshield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ghru_Rotshield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(121, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ghru_Rotshield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ghru_Rotshield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ghru_Rotshield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(100, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Giant_Door_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(128, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Giant_Door_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Giant_Door_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Giant_Door_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(131, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Giant_Door_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(148, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Giant_Door_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(131, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Giant_Door_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(201, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Giant_Door_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(201, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Giant_Door_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(118, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Giant_Door_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(121, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Giant_Door_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(148, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Giant_Door_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Giant_Door_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(201, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Giant_Door_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Giant_Door_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(118, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Giant_Door_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(131, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Glaive_None){
const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(169, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Glaive_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Glaive_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(131, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Glaive_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(159, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Glaive_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(180, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Glaive_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(159, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Glaive_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(134, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(223, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Glaive_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(134, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(223, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Glaive_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(156, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Glaive_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(160, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Glaive_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(180, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Glaive_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(131, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Glaive_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(219, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Glaive_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(148, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Glaive_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(156, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Glaive_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(159, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Golden_Falcon_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Golden_Falcon_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Golden_Falcon_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Golden_Falcon_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(54, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(95, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Golden_Falcon_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(107, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Golden_Falcon_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(54, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(95, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Golden_Falcon_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(118, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Golden_Falcon_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(118, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Golden_Falcon_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Golden_Falcon_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Golden_Falcon_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(107, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Golden_Falcon_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Golden_Falcon_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Golden_Falcon_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Golden_Falcon_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Golden_Falcon_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(54, static_cast<int>(damage.physical));EXPECT_EQ(95, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Golden_Ritual_Spear_None){
const auto& [damage, status] = calculator::AttackRating(db, "Golden Ritual Spear", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(80, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Golden_Wing_Crest_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Golden Wing Crest Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gotthard_Twinswords_None){
const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gotthard_Twinswords_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gotthard_Twinswords_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gotthard_Twinswords_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(115, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gotthard_Twinswords_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(130, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gotthard_Twinswords_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(115, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gotthard_Twinswords_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(113, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(188, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gotthard_Twinswords_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(113, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(188, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gotthard_Twinswords_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gotthard_Twinswords_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gotthard_Twinswords_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(130, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gotthard_Twinswords_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gotthard_Twinswords_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(170, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gotthard_Twinswords_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gotthard_Twinswords_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gotthard_Twinswords_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(115, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Grass_Crest_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Grass Crest Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(96, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Club_None){
const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(182, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Club_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Club_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(141, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(73, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Club_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(169, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Club_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(191, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Club_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(169, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Club_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(158, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(264, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Club_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(158, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(264, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Club_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(168, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Club_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(173, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Club_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(191, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Club_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(141, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(96, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Club_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(269, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Club_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(168, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Club_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(168, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Club_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(169, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Corvian_Scythe_None){
const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(38, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Corvian_Scythe_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(38, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Corvian_Scythe_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(90, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Corvian_Scythe_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(111, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(38, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Corvian_Scythe_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(126, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(38, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Corvian_Scythe_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(111, static_cast<int>(damage.dark));EXPECT_EQ(38, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Corvian_Scythe_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(207, static_cast<int>(damage.dark));EXPECT_EQ(38, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Corvian_Scythe_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(207, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(38, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Corvian_Scythe_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(107, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(38, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Corvian_Scythe_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(110, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(38, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Corvian_Scythe_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(126, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(38, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Corvian_Scythe_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(90, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(38, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Corvian_Scythe_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(190, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(38, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Corvian_Scythe_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(38, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Corvian_Scythe_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(107, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(38, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Corvian_Scythe_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(111, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(38, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Mace_None){
const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(222, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Mace_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(136, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Mace_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(172, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(73, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Mace_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(201, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Mace_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(136, static_cast<int>(damage.physical));EXPECT_EQ(227, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Mace_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(201, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Mace_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(177, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(296, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Mace_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(177, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(296, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Mace_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(205, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Mace_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(210, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Mace_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(140, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(234, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Mace_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(172, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(96, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Mace_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(296, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Mace_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(205, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Mace_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(205, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Mace_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(201, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Machete_None){
const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(200, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Machete_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Machete_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(155, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(73, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Machete_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(180, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Machete_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(204, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Machete_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(180, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Machete_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(163, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(271, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Machete_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(163, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(271, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Machete_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(185, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Machete_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(190, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Machete_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(204, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Machete_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(155, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(96, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Machete_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(263, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Machete_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(175, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Machete_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(185, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Machete_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(180, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Scythe_None){
const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Scythe_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Scythe_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Scythe_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(118, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Scythe_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(133, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Scythe_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(118, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Scythe_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(203, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Scythe_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(203, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Scythe_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Scythe_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Scythe_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(133, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Scythe_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Scythe_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(179, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Scythe_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(113, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Scythe_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Scythe_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(118, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Wooden_Hammer_None){
const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(150, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Wooden_Hammer_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Wooden_Hammer_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(73, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Wooden_Hammer_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(149, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Wooden_Hammer_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(169, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Wooden_Hammer_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(149, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Wooden_Hammer_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(144, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(240, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Wooden_Hammer_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(144, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(240, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Wooden_Hammer_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Wooden_Hammer_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(142, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Wooden_Hammer_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(169, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Wooden_Hammer_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(96, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Wooden_Hammer_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(234, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Wooden_Hammer_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Wooden_Hammer_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Great_Wooden_Hammer_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(149, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greataxe_None){
const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(225, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greataxe_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(136, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greataxe_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(174, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(73, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greataxe_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(201, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greataxe_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(136, static_cast<int>(damage.physical));EXPECT_EQ(227, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greataxe_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(201, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greataxe_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(169, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(283, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greataxe_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(169, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(283, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greataxe_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(208, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greataxe_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(214, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greataxe_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(136, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(227, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greataxe_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(174, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(96, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greataxe_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(301, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greataxe_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(197, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greataxe_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(208, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greataxe_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(201, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatlance_None){
const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(154, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatlance_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatlance_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatlance_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(140, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatlance_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(158, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatlance_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(140, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatlance_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(132, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(220, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatlance_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(132, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(220, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatlance_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(143, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatlance_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(147, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatlance_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(163, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatlance_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatlance_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(216, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatlance_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(135, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatlance_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(143, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatlance_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(140, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatshield_of_Glory_None){
const auto& [damage, status] = calculator::AttackRating(db, "Greatshield of Glory", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(140, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(190, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatsword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatsword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(147, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(73, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatsword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(177, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatsword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(200, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatsword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(177, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatsword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(170, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(284, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatsword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(170, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(284, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatsword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(176, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatsword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(181, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatsword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(200, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatsword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(147, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(96, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatsword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(287, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatsword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(171, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatsword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(176, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatsword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(177, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Greatsword_of_Judgment_None){
const auto& [damage, status] = calculator::AttackRating(db, "Greatsword of Judgment", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(94, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Gundyrs_Halberd_None){
const auto& [damage, status] = calculator::AttackRating(db, "Gundyr's Halberd", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(158, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Halberd_None){
const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(150, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Halberd_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Halberd_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Halberd_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(138, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Halberd_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(156, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Halberd_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(138, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Halberd_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(133, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(222, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Halberd_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(133, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(222, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Halberd_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Halberd_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(142, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Halberd_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(156, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Halberd_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Halberd_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(218, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Halberd_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(135, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Halberd_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Halberd_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(138, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hand_Axe_None){
const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(132, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hand_Axe_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hand_Axe_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hand_Axe_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(123, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hand_Axe_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(139, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hand_Axe_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(123, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hand_Axe_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(207, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hand_Axe_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(207, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hand_Axe_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hand_Axe_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(125, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hand_Axe_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(139, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hand_Axe_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hand_Axe_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(182, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hand_Axe_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hand_Axe_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hand_Axe_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(123, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Handmaids_Dagger_None){
const auto& [damage, status] = calculator::AttackRating(db, "Handmaid's Dagger", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harald_Curved_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(168, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harald_Curved_Greatsword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(113, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harald_Curved_Greatsword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(130, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harald_Curved_Greatsword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(166, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harald_Curved_Greatsword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(113, static_cast<int>(damage.physical));EXPECT_EQ(188, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harald_Curved_Greatsword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(166, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harald_Curved_Greatsword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(155, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(259, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harald_Curved_Greatsword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(155, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(259, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harald_Curved_Greatsword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(155, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harald_Curved_Greatsword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(159, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harald_Curved_Greatsword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(113, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(188, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harald_Curved_Greatsword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(130, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harald_Curved_Greatsword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(265, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harald_Curved_Greatsword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(151, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harald_Curved_Greatsword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(155, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harald_Curved_Greatsword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(166, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harpe_None){
const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harpe_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harpe_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harpe_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(49, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(86, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harpe_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(97, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harpe_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(49, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(86, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harpe_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(142, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harpe_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(142, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harpe_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harpe_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harpe_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(97, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harpe_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harpe_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(112, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harpe_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harpe_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Harpe_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(49, static_cast<int>(damage.physical));EXPECT_EQ(86, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Havels_Greatshield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Havel's Greatshield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(150, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hawkwoods_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hawkwoods_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(63, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hawkwoods_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hawkwoods_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(53, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(93, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hawkwoods_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(63, static_cast<int>(damage.physical));EXPECT_EQ(105, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hawkwoods_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(53, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(93, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hawkwoods_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(114, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hawkwoods_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(114, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hawkwoods_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hawkwoods_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hawkwoods_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(63, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(105, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hawkwoods_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hawkwoods_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(112, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hawkwoods_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hawkwoods_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hawkwoods_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(53, static_cast<int>(damage.physical));EXPECT_EQ(93, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Heavy_Crossbow_None){
const auto& [damage, status] = calculator::AttackRating(db, "Heavy Crossbow", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(151, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Heretics_Staff_None){
const auto& [damage, status] = calculator::AttackRating(db, "Heretic's Staff", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Heysel_Pick_None){
const auto& [damage, status] = calculator::AttackRating(db, "Heysel Pick", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(73, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Hollowslayer_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Hollowslayer Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(158, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Immolation_Tinder_None){
const auto& [damage, status] = calculator::AttackRating(db, "Immolation Tinder", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(79, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Irithyll_Rapier_None){
const auto& [damage, status] = calculator::AttackRating(db, "Irithyll Rapier", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(121, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(55, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Irithyll_Straight_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Irithyll Straight Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(129, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(55, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Iron_Round_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Iron_Round_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Iron_Round_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Iron_Round_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(52, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(92, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Iron_Round_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(104, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Iron_Round_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(52, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(92, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Iron_Round_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(112, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Iron_Round_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(112, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Iron_Round_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Iron_Round_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Iron_Round_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(104, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Iron_Round_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Iron_Round_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(110, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Iron_Round_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Iron_Round_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Iron_Round_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(52, static_cast<int>(damage.physical));EXPECT_EQ(92, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Izalith_Staff_None){
const auto& [damage, status] = calculator::AttackRating(db, "Izalith Staff", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Kite_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(96, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Kite_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Kite_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Kite_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(102, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Kite_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(115, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Kite_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(102, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Kite_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(129, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Kite_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(129, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Kite_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Kite_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Kite_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(115, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Kite_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Kite_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Kite_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Kite_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Kite_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(102, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Knight_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(94, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Knight_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Knight_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Knight_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(101, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Knight_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(114, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Knight_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(101, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Knight_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(127, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Knight_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(127, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Knight_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Knight_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(90, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Knight_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(114, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Knight_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Knight_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Knight_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Knight_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Knight_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(101, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Knights_Crossbow_None){
const auto& [damage, status] = calculator::AttackRating(db, "Knight's Crossbow", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(140, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Club_None){
const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(177, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Club_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Club_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(137, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(73, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Club_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(162, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Club_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(183, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Club_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(162, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Club_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(142, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(236, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Club_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(142, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(236, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Club_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(164, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Club_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(168, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Club_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(183, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Club_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(137, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(96, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Club_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(238, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Club_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(164, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Club_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(164, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Club_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(162, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Leather_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Leather_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Leather_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Leather_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(100, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Leather_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(113, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Leather_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(100, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Leather_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(125, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Leather_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(125, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Leather_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Leather_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Leather_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(113, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Leather_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Leather_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(121, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Leather_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Leather_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Large_Leather_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(100, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Leather_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Leather_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Leather_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Leather_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(51, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(89, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Leather_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(101, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Leather_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(51, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(89, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Leather_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(109, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Leather_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(109, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Leather_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Leather_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Leather_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(101, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Leather_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Leather_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(107, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Leather_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Leather_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Leather_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(51, static_cast<int>(damage.physical));EXPECT_EQ(89, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ledos_Great_Hammer_None){
const auto& [damage, status] = calculator::AttackRating(db, "Ledo's Great Hammer", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(177, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Light_Crossbow_None){
const auto& [damage, status] = calculator::AttackRating(db, "Light Crossbow", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(134, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Llewellyn_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Llewellyn_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Llewellyn_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Llewellyn_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(56, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(97, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Llewellyn_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(110, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Llewellyn_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(56, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(97, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Llewellyn_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(122, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Llewellyn_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(122, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Llewellyn_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Llewellyn_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Llewellyn_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(110, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Llewellyn_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Llewellyn_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(118, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Llewellyn_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Llewellyn_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Llewellyn_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(56, static_cast<int>(damage.physical));EXPECT_EQ(97, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Long_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(132, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Long_Sword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Long_Sword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Long_Sword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(121, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Long_Sword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(137, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Long_Sword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(121, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Long_Sword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(203, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Long_Sword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(203, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Long_Sword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Long_Sword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(125, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Long_Sword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(137, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Long_Sword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Long_Sword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(185, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Long_Sword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(118, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Long_Sword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Long_Sword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(121, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Longbow_None){
const auto& [damage, status] = calculator::AttackRating(db, "Longbow", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lorians_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Lorian's Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(165, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(144, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatshield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(133, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatshield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(90, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatshield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatshield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(133, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatshield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(90, static_cast<int>(damage.physical));EXPECT_EQ(150, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatshield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(133, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatshield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(177, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatshield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(177, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatshield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatshield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatshield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(90, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(150, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatshield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatshield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(173, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatshield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatshield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatshield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(133, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(157, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(174, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatsword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(113, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatsword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(121, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(134, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(73, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatsword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(155, static_cast<int>(damage.fire));EXPECT_EQ(87, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatsword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(185, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(87, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatsword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(87, static_cast<int>(damage.lightning));EXPECT_EQ(155, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatsword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(150, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(87, static_cast<int>(damage.lightning));EXPECT_EQ(251, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatsword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(150, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(251, static_cast<int>(damage.fire));EXPECT_EQ(87, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatsword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(145, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(174, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatsword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(149, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(165, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatsword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(94, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(231, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatsword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(121, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(134, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(96, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatsword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(204, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(174, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatsword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(141, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(174, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatsword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(145, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(174, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Greatsword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(94, static_cast<int>(damage.physical));EXPECT_EQ(164, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(87, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Long_Spear_None){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(134, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Long_Spear_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Long_Spear_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Long_Spear_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(124, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Long_Spear_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(140, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Long_Spear_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(124, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Long_Spear_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(196, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Long_Spear_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(196, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Long_Spear_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Long_Spear_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Long_Spear_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(140, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Long_Spear_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Long_Spear_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(180, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Long_Spear_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Long_Spear_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Long_Spear_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(124, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(105, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(119, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(105, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(135, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(135, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(94, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(119, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(129, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(105, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Sword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Sword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Sword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(118, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Sword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(133, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Sword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(118, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Sword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(199, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Sword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(199, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Sword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Sword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Sword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(133, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Sword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Sword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(179, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Sword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Sword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_Knight_Sword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(118, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_War_Banner_None){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_War_Banner_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_War_Banner_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_War_Banner_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(115, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_War_Banner_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(130, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_War_Banner_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(115, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_War_Banner_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(185, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_War_Banner_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(185, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_War_Banner_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_War_Banner_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_War_Banner_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(130, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_War_Banner_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_War_Banner_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(171, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_War_Banner_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_War_Banner_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothric_War_Banner_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(115, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lothrics_Holy_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Lothric's Holy Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lucerne_None){
const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(151, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lucerne_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(94, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lucerne_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lucerne_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(139, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lucerne_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(94, static_cast<int>(damage.physical));EXPECT_EQ(157, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lucerne_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(139, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lucerne_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(134, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(223, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lucerne_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(134, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(223, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lucerne_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(139, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lucerne_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(143, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lucerne_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(94, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(157, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lucerne_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lucerne_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(212, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lucerne_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(136, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lucerne_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(139, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Lucerne_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(139, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mace_None){
const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mace_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mace_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mace_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(138, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mace_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(156, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mace_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(138, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mace_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(212, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mace_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(212, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mace_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mace_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(131, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mace_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(162, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mace_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mace_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(210, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mace_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mace_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mace_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(138, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mail_Breaker_None){
const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mail_Breaker_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mail_Breaker_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mail_Breaker_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(111, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mail_Breaker_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(126, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mail_Breaker_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(111, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mail_Breaker_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(142, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mail_Breaker_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(142, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mail_Breaker_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mail_Breaker_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mail_Breaker_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(126, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mail_Breaker_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mail_Breaker_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mail_Breaker_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(96, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mail_Breaker_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mail_Breaker_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(111, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Man_Serpent_Hatchet_None){
const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(150, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Man_Serpent_Hatchet_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Man_Serpent_Hatchet_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Man_Serpent_Hatchet_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(138, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Man_Serpent_Hatchet_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(156, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Man_Serpent_Hatchet_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(138, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Man_Serpent_Hatchet_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(212, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Man_Serpent_Hatchet_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(212, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Man_Serpent_Hatchet_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Man_Serpent_Hatchet_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(142, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Man_Serpent_Hatchet_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(156, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Man_Serpent_Hatchet_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Man_Serpent_Hatchet_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(195, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Man_Serpent_Hatchet_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(131, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Man_Serpent_Hatchet_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Man_Serpent_Hatchet_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(138, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mangrubs_Staff_None){
const auto& [damage, status] = calculator::AttackRating(db, "Man-grub's Staff", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(94, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Manikin_Claws_None){
const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Manikin_Claws_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Manikin_Claws_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Manikin_Claws_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(100, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Manikin_Claws_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(113, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Manikin_Claws_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(100, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Manikin_Claws_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(164, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Manikin_Claws_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(164, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Manikin_Claws_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Manikin_Claws_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Manikin_Claws_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(113, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Manikin_Claws_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Manikin_Claws_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(143, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Manikin_Claws_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Manikin_Claws_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Manikin_Claws_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(100, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mendicants_Staff_None){
const auto& [damage, status] = calculator::AttackRating(db, "Mendicant's Staff", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Millwood_Battle_Axe_None){
const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(162, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Millwood_Battle_Axe_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Millwood_Battle_Axe_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(125, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Millwood_Battle_Axe_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(149, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Millwood_Battle_Axe_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(169, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Millwood_Battle_Axe_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(149, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Millwood_Battle_Axe_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(133, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(222, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Millwood_Battle_Axe_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(133, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(222, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Millwood_Battle_Axe_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(149, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Millwood_Battle_Axe_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(153, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Millwood_Battle_Axe_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(169, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Millwood_Battle_Axe_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(125, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Millwood_Battle_Axe_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(210, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Millwood_Battle_Axe_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(145, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Millwood_Battle_Axe_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(149, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Millwood_Battle_Axe_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(149, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Millwood_Greatbow_None){
const auto& [damage, status] = calculator::AttackRating(db, "Millwood Greatbow", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(145, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Moaning_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Moaning Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(142, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Moonlight_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Moonlight Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(142, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Morion_Blade_None){
const auto& [damage, status] = calculator::AttackRating(db, "Morion Blade", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(136, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(34, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Mornes_Great_Hammer_None){
const auto& [damage, status] = calculator::AttackRating(db, "Morne's Great Hammer", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(208, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Morning_Star_None){
const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(146, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Morning_Star_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Morning_Star_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(113, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Morning_Star_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(146, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Morning_Star_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(165, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Morning_Star_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(146, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Morning_Star_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(207, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Morning_Star_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(207, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Morning_Star_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(135, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Morning_Star_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(139, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Morning_Star_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(171, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Morning_Star_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(113, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Morning_Star_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(198, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Morning_Star_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(128, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Morning_Star_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(135, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Morning_Star_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(146, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murakumo_None){
const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(158, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murakumo_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murakumo_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murakumo_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(143, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murakumo_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(162, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murakumo_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(143, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murakumo_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(146, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(244, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murakumo_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(146, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(244, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murakumo_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(146, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murakumo_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(150, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murakumo_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(162, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murakumo_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murakumo_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(244, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murakumo_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(142, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murakumo_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(146, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murakumo_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(143, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murky_Hand_Scythe_None){
const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(26, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murky_Hand_Scythe_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(56, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(17, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murky_Hand_Scythe_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(20, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murky_Hand_Scythe_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(54, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(56, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(13, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murky_Hand_Scythe_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(63, static_cast<int>(damage.physical));EXPECT_EQ(63, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(13, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murky_Hand_Scythe_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(40, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(61, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murky_Hand_Scythe_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(104, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murky_Hand_Scythe_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(79, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(13, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murky_Hand_Scythe_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(26, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murky_Hand_Scythe_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(25, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murky_Hand_Scythe_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(63, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(63, static_cast<int>(damage.lightning));EXPECT_EQ(13, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murky_Hand_Scythe_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(20, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murky_Hand_Scythe_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(112, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(26, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murky_Hand_Scythe_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(26, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murky_Hand_Scythe_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(26, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murky_Hand_Scythe_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(47, static_cast<int>(damage.physical));EXPECT_EQ(49, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(13, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Murky_Longstaff_None){
const auto& [damage, status] = calculator::AttackRating(db, "Murky Longstaff", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(28, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Notched_Whip_None){
const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Notched_Whip_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Notched_Whip_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Notched_Whip_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(116, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Notched_Whip_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(131, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Notched_Whip_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(116, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Notched_Whip_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(166, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Notched_Whip_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(166, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Notched_Whip_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Notched_Whip_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Notched_Whip_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(131, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Notched_Whip_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Notched_Whip_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(148, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Notched_Whip_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Notched_Whip_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Notched_Whip_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(116, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Old_Kings_Great_Hammer_None){
const auto& [damage, status] = calculator::AttackRating(db, "Old King's Great Hammer", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(196, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(75, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Old_Wolf_Curved_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Old Wolf Curved Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(162, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Onikiri_and_Ubadachi_None){
const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Onikiri_and_Ubadachi_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Onikiri_and_Ubadachi_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(96, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Onikiri_and_Ubadachi_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(113, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Onikiri_and_Ubadachi_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(128, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Onikiri_and_Ubadachi_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(113, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Onikiri_and_Ubadachi_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(192, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Onikiri_and_Ubadachi_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(192, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Onikiri_and_Ubadachi_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Onikiri_and_Ubadachi_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(118, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Onikiri_and_Ubadachi_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(128, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Onikiri_and_Ubadachi_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(96, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Onikiri_and_Ubadachi_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(177, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Onikiri_and_Ubadachi_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(112, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Onikiri_and_Ubadachi_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Onikiri_and_Ubadachi_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(113, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Onislayer_Greatbow_None){
const auto& [damage, status] = calculator::AttackRating(db, "Onislayer Greatbow", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Onyx_Blade_None){
const auto& [damage, status] = calculator::AttackRating(db, "Onyx Blade", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(120, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Painting_Guardians_Curved_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Painting_Guardians_Curved_Sword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Painting_Guardians_Curved_Sword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Painting_Guardians_Curved_Sword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(100, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Painting_Guardians_Curved_Sword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(117, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Painting_Guardians_Curved_Sword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(100, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Painting_Guardians_Curved_Sword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(190, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Painting_Guardians_Curved_Sword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(190, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Painting_Guardians_Curved_Sword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Painting_Guardians_Curved_Sword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(100, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Painting_Guardians_Curved_Sword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(117, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Painting_Guardians_Curved_Sword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Painting_Guardians_Curved_Sword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(176, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Painting_Guardians_Curved_Sword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Painting_Guardians_Curved_Sword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Painting_Guardians_Curved_Sword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(59, static_cast<int>(damage.physical));EXPECT_EQ(103, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Parrying_Dagger_None){
const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Parrying_Dagger_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(56, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Parrying_Dagger_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(55, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Parrying_Dagger_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(48, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(83, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Parrying_Dagger_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(56, static_cast<int>(damage.physical));EXPECT_EQ(94, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Parrying_Dagger_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(48, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(83, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Parrying_Dagger_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(138, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Parrying_Dagger_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(138, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Parrying_Dagger_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Parrying_Dagger_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Parrying_Dagger_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(56, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(94, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Parrying_Dagger_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(55, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Parrying_Dagger_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Parrying_Dagger_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Parrying_Dagger_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Parrying_Dagger_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(48, static_cast<int>(damage.physical));EXPECT_EQ(83, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Partizan_None){
const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(129, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Partizan_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Partizan_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(100, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Partizan_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(120, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Partizan_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(136, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Partizan_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(120, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Partizan_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(199, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Partizan_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(199, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Partizan_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Partizan_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Partizan_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(136, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Partizan_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(100, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Partizan_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(184, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Partizan_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Partizan_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Partizan_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(120, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pickaxe_None){
const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(168, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pickaxe_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pickaxe_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(130, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(73, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pickaxe_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(155, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pickaxe_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(175, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pickaxe_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(155, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pickaxe_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(144, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(240, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pickaxe_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(144, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(240, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pickaxe_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(155, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pickaxe_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(159, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pickaxe_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(175, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pickaxe_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(130, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(96, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pickaxe_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(234, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pickaxe_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(155, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pickaxe_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(155, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pickaxe_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(155, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pierce_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pierce_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pierce_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pierce_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(63, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(110, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pierce_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(124, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pierce_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(63, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(110, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pierce_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(142, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pierce_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(142, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pierce_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(96, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pierce_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pierce_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(124, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pierce_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pierce_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(135, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pierce_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pierce_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(96, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pierce_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(63, static_cast<int>(damage.physical));EXPECT_EQ(110, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pike_None){
const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pike_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pike_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pike_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(121, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pike_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(137, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pike_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(121, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pike_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(205, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pike_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(205, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pike_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pike_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pike_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(137, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pike_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pike_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(188, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pike_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(113, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pike_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pike_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(121, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Plank_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(63, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Plank_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(50, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Plank_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(49, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Plank_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(42, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(74, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Plank_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(50, static_cast<int>(damage.physical));EXPECT_EQ(84, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Plank_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(42, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(74, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Plank_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(49, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(83, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Plank_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(49, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(83, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Plank_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Plank_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Plank_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(50, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(84, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Plank_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(49, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Plank_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Plank_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Plank_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Plank_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(42, static_cast<int>(damage.physical));EXPECT_EQ(74, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pontiff_Knight_Curved_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Pontiff Knight Curved Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(128, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pontiff_Knight_Great_Scythe_None){
const auto& [damage, status] = calculator::AttackRating(db, "Pontiff Knight Great Scythe", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pontiff_Knight_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Pontiff Knight Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Porcine_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Porcine_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Porcine_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Porcine_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(108, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Porcine_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(122, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Porcine_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(108, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Porcine_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(138, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Porcine_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(138, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Porcine_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(94, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Porcine_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(96, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Porcine_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(122, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Porcine_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Porcine_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(132, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Porcine_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Porcine_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(94, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Porcine_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(108, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Preachers_Right_Arm_None){
const auto& [damage, status] = calculator::AttackRating(db, "Preacher's Right Arm", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Priests_Chime_None){
const auto& [damage, status] = calculator::AttackRating(db, "Priest's Chime", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Profaned_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Profaned Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(176, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pyromancers_Parting_Flame_None){
const auto& [damage, status] = calculator::AttackRating(db, "Pyromancer's Parting Flame", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(0, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(118, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Pyromancy_Flame_None){
const auto& [damage, status] = calculator::AttackRating(db, "Pyromancy Flame", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(0, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(180, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Quakestone_Hammer_None){
const auto& [damage, status] = calculator::AttackRating(db, "Quakestone Hammer", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(177, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rapier_None){
const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rapier_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rapier_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rapier_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(61, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(106, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rapier_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(120, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rapier_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(61, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(106, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rapier_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(185, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rapier_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(185, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rapier_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rapier_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rapier_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(120, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rapier_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rapier_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(163, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rapier_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rapier_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rapier_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(61, static_cast<int>(damage.physical));EXPECT_EQ(106, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_Hilted_Halberd_None){
const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(156, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_Hilted_Halberd_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_Hilted_Halberd_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_Hilted_Halberd_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(138, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_Hilted_Halberd_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(156, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_Hilted_Halberd_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(138, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_Hilted_Halberd_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(133, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(222, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_Hilted_Halberd_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(133, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(222, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_Hilted_Halberd_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(144, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_Hilted_Halberd_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(148, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_Hilted_Halberd_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(156, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_Hilted_Halberd_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_Hilted_Halberd_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(210, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_Hilted_Halberd_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(140, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_Hilted_Halberd_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(144, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_Hilted_Halberd_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(138, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_and_White_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_and_White_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_and_White_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_and_White_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(51, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(89, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_and_White_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(101, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_and_White_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(51, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(89, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_and_White_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(109, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_and_White_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(109, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_and_White_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_and_White_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_and_White_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(101, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_and_White_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_and_White_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(107, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_and_White_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_and_White_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Red_and_White_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(51, static_cast<int>(damage.physical));EXPECT_EQ(89, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Reinforced_Club_None){
const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(132, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Reinforced_Club_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Reinforced_Club_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Reinforced_Club_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(132, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Reinforced_Club_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(149, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Reinforced_Club_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(132, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Reinforced_Club_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(203, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Reinforced_Club_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(203, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Reinforced_Club_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Reinforced_Club_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(125, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Reinforced_Club_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(149, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Reinforced_Club_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Reinforced_Club_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(195, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Reinforced_Club_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Reinforced_Club_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Reinforced_Club_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(132, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Repeating_Crossbow_None){
const auto& [damage, status] = calculator::AttackRating(db, "Repeating Crossbow", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(136, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ricards_Rapier_None){
const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ricards_Rapier_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ricards_Rapier_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(90, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ricards_Rapier_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(109, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ricards_Rapier_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(123, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ricards_Rapier_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(109, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ricards_Rapier_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(113, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(188, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ricards_Rapier_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(113, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(188, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ricards_Rapier_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(107, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ricards_Rapier_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(110, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ricards_Rapier_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(123, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ricards_Rapier_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(90, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ricards_Rapier_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(166, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ricards_Rapier_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ricards_Rapier_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(107, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ricards_Rapier_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(109, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ringed_Knight_Paired_Greatswords_None){
const auto& [damage, status] = calculator::AttackRating(db, "Ringed Knight Paired Greatswords", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(193, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(20, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ringed_Knight_Spear_None){
const auto& [damage, status] = calculator::AttackRating(db, "Ringed Knight Spear", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(132, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(22, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Ringed_Knight_Straight_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Ringed Knight Straight Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(20, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rose_of_Ariandel_None){
const auto& [damage, status] = calculator::AttackRating(db, "Rose of Ariandel", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(34, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Curved_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Curved_Sword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Curved_Sword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Curved_Sword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(118, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Curved_Sword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(133, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Curved_Sword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(118, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Curved_Sword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(190, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Curved_Sword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(190, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Curved_Sword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Curved_Sword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Curved_Sword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(133, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Curved_Sword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(69, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Curved_Sword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(176, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Curved_Sword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Curved_Sword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Curved_Sword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(118, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Dagger_None){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Dagger_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Dagger_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(59, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Dagger_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(50, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(88, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Dagger_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(100, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Dagger_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(50, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(88, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Dagger_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(146, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Dagger_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(146, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Dagger_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Dagger_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Dagger_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(100, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Dagger_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(59, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(69, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Dagger_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(107, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Dagger_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Dagger_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Dagger_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(50, static_cast<int>(damage.physical));EXPECT_EQ(88, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Spear_None){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Spear_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Spear_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(96, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Spear_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(119, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Spear_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(135, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Spear_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(119, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Spear_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(192, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Spear_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(192, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Spear_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Spear_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(118, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Spear_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(135, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Spear_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(96, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(69, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Spear_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(177, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Spear_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(112, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Spear_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Rotten_Ghru_Spear_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(119, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Round_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(94, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Round_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Round_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Round_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(56, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(98, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Round_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(111, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Round_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(56, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(98, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Round_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(127, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Round_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(127, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Round_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Round_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(90, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Round_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(111, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Round_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Round_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Round_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Round_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Round_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(56, static_cast<int>(damage.physical));EXPECT_EQ(98, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sacred_Bloom_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Sacred Bloom Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sacred_Chime_of_Filianore_None){
const auto& [damage, status] = calculator::AttackRating(db, "Sacred Chime of Filianore", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sages_Crystal_Staff_None){
const auto& [damage, status] = calculator::AttackRating(db, "Sage's Crystal Staff", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Saint_Bident_None){
const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Saint_Bident_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Saint_Bident_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Saint_Bident_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(74, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Saint_Bident_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(137, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Saint_Bident_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(74, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Saint_Bident_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(119, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Saint_Bident_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(119, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Saint_Bident_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Saint_Bident_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Saint_Bident_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(72, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Saint_Bident_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Saint_Bident_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(184, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Saint_Bident_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Saint_Bident_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Saint_Bident_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(69, static_cast<int>(damage.physical));EXPECT_EQ(121, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Saints_Talisman_None){
const auto& [damage, status] = calculator::AttackRating(db, "Saint's Talisman", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sainttree_Bellvine_None){
const auto& [damage, status] = calculator::AttackRating(db, "Saint-tree Bellvine", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Scholars_Candlestick_None){
const auto& [damage, status] = calculator::AttackRating(db, "Scholar's Candlestick", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Scimitar_None){
const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Scimitar_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Scimitar_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Scimitar_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(102, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Scimitar_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(119, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Scimitar_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(58, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(102, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Scimitar_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(194, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Scimitar_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(194, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Scimitar_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Scimitar_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Scimitar_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(119, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Scimitar_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Scimitar_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(179, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Scimitar_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Scimitar_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Scimitar_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(105, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sellsword_Twinblades_None){
const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(118, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sellsword_Twinblades_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sellsword_Twinblades_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sellsword_Twinblades_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(113, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sellsword_Twinblades_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(128, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sellsword_Twinblades_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(113, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sellsword_Twinblades_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(183, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sellsword_Twinblades_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(183, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sellsword_Twinblades_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sellsword_Twinblades_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(112, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sellsword_Twinblades_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(128, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sellsword_Twinblades_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sellsword_Twinblades_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(162, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sellsword_Twinblades_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sellsword_Twinblades_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sellsword_Twinblades_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(113, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shield_of_Want_None){
const auto& [damage, status] = calculator::AttackRating(db, "Shield of Want", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Short_Bow_None){
const auto& [damage, status] = calculator::AttackRating(db, "Short Bow", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shortsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(118, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shortsword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shortsword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shortsword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(113, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shortsword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(128, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shortsword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(113, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shortsword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(192, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shortsword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(192, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shortsword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shortsword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(112, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shortsword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(128, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shortsword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shortsword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(170, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shortsword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shortsword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shortsword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(113, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shotel_None){
const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shotel_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shotel_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(96, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shotel_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(119, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shotel_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(135, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shotel_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(119, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shotel_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(183, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shotel_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(183, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shotel_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shotel_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(118, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shotel_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(135, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shotel_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(96, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shotel_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(170, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shotel_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(112, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shotel_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Shotel_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(113, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Silver_Eagle_Kite_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Silver_Eagle_Kite_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Silver_Eagle_Kite_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Silver_Eagle_Kite_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(111, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Silver_Eagle_Kite_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(126, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Silver_Eagle_Kite_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(111, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Silver_Eagle_Kite_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(144, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Silver_Eagle_Kite_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(144, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Silver_Eagle_Kite_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Silver_Eagle_Kite_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(100, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Silver_Eagle_Kite_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(126, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Silver_Eagle_Kite_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Silver_Eagle_Kite_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(137, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Silver_Eagle_Kite_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Silver_Eagle_Kite_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Silver_Eagle_Kite_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(111, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Silver_Knight_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Silver Knight Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Small_Leather_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Small_Leather_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Small_Leather_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Small_Leather_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(50, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(88, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Small_Leather_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(100, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Small_Leather_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(50, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(88, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Small_Leather_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(111, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Small_Leather_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(111, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Small_Leather_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Small_Leather_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Small_Leather_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(100, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Small_Leather_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Small_Leather_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Small_Leather_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Small_Leather_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Small_Leather_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(50, static_cast<int>(damage.physical));EXPECT_EQ(88, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Smoughs_Great_Hammer_None){
const auto& [damage, status] = calculator::AttackRating(db, "Smough's Great Hammer", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(214, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sniper_Crossbow_None){
const auto& [damage, status] = calculator::AttackRating(db, "Sniper Crossbow", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(147, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Soldering_Iron_None){
const auto& [damage, status] = calculator::AttackRating(db, "Soldering Iron", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(46, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(192, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sorcerers_Staff_None){
const auto& [damage, status] = calculator::AttackRating(db, "Sorcerer's Staff", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spear_None){
const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spear_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spear_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(96, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spear_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(116, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spear_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(131, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spear_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(116, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spear_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(192, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spear_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(192, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spear_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spear_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(118, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spear_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(131, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spear_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(96, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spear_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(177, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spear_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(112, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spear_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spear_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(66, static_cast<int>(damage.physical));EXPECT_EQ(116, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spider_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spider_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spider_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spider_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(111, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spider_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(126, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spider_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(111, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spider_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(144, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spider_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(144, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spider_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spider_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(100, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spider_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(126, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spider_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spider_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(137, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spider_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spider_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spider_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(111, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Mace_None){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(178, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(43, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Mace_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(110, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(43, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Mace_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(73, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Mace_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(163, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(43, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Mace_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(110, static_cast<int>(damage.physical));EXPECT_EQ(184, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(43, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Mace_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(163, static_cast<int>(damage.dark));EXPECT_EQ(43, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Mace_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(145, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(242, static_cast<int>(damage.dark));EXPECT_EQ(43, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Mace_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(145, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(242, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(43, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Mace_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(165, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(43, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Mace_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(169, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(43, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Mace_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(110, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(184, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(43, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Mace_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(43, static_cast<int>(status.bleed));EXPECT_EQ(96, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Mace_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(243, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(43, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Mace_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(165, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(43, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Mace_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(165, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(43, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Mace_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(163, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(43, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(109, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(123, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(109, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(140, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(140, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(123, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(134, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spiked_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(109, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spirit_Tree_Crest_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Spirit Tree Crest Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Splitleaf_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(158, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Splitleaf_Greatsword_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Splitleaf_Greatsword_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Splitleaf_Greatsword_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(155, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Splitleaf_Greatsword_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(175, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Splitleaf_Greatsword_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(155, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Splitleaf_Greatsword_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(143, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(238, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Splitleaf_Greatsword_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(143, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(238, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Splitleaf_Greatsword_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(146, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Splitleaf_Greatsword_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(150, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Splitleaf_Greatsword_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(175, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Splitleaf_Greatsword_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Splitleaf_Greatsword_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(240, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Splitleaf_Greatsword_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(142, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Splitleaf_Greatsword_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(146, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Splitleaf_Greatsword_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(155, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Spotted_Whip_None){
const auto& [damage, status] = calculator::AttackRating(db, "Spotted Whip", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(122, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(36, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Greatshield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Greatshield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(90, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Greatshield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Greatshield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(133, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Greatshield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(90, static_cast<int>(damage.physical));EXPECT_EQ(150, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Greatshield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(133, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Greatshield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(177, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Greatshield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(177, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Greatshield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Greatshield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Greatshield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(90, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(150, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Greatshield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Greatshield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(173, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Greatshield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(119, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Greatshield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(123, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Greatshield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(133, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Parma_None){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(112, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Parma_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Parma_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Parma_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(118, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Parma_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(133, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Parma_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(118, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Parma_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(155, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Parma_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(155, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Parma_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Parma_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(107, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Parma_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(133, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Parma_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(87, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Parma_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(146, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Parma_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Parma_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Stone_Parma_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(118, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Storm_Curved_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Storm Curved Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Storm_Ruler_None){
const auto& [damage, status] = calculator::AttackRating(db, "Storm Ruler", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(280, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Storytellers_Staff_None){
const auto& [damage, status] = calculator::AttackRating(db, "Storyteller's Staff", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunless_Talisman_None){
const auto& [damage, status] = calculator::AttackRating(db, "Sunless Talisman", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunlight_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunlight_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunlight_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunlight_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(104, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunlight_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(118, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunlight_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(104, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunlight_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(133, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunlight_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(133, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunlight_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunlight_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunlight_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(118, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunlight_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunlight_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunlight_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunlight_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunlight_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(104, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunlight_Straight_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Straight Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunlight_Talisman_None){
const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Talisman", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunset_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunset_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunset_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunset_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(104, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunset_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(118, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunset_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(104, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunset_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(133, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunset_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(133, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunset_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunset_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunset_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(118, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunset_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunset_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunset_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunset_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(91, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Sunset_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(104, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Tailbone_Short_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Tailbone Short Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Tailbone_Spear_None){
const auto& [damage, status] = calculator::AttackRating(db, "Tailbone Spear", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(129, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Talisman_None){
const auto& [damage, status] = calculator::AttackRating(db, "Talisman", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(70, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Target_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Target_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Target_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Target_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(51, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(89, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Target_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(101, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Target_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(51, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(89, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Target_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(109, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Target_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(65, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(109, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Target_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Target_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(78, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Target_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(60, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(101, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Target_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Target_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(107, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Target_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Target_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Target_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(51, static_cast<int>(damage.physical));EXPECT_EQ(89, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Thrall_Axe_None){
const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Thrall_Axe_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Thrall_Axe_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(96, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Thrall_Axe_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(119, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Thrall_Axe_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(135, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Thrall_Axe_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(119, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Thrall_Axe_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(192, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Thrall_Axe_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(192, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Thrall_Axe_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Thrall_Axe_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(118, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Thrall_Axe_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(135, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Thrall_Axe_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(96, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Thrall_Axe_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(170, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Thrall_Axe_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Thrall_Axe_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Thrall_Axe_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(119, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Torch_None){
const auto& [damage, status] = calculator::AttackRating(db, "Torch", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(42, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(160, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Twin_Dragon_Greatshield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Twin_Dragon_Greatshield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Twin_Dragon_Greatshield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Twin_Dragon_Greatshield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(127, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Twin_Dragon_Greatshield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(144, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Twin_Dragon_Greatshield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(127, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Twin_Dragon_Greatshield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(168, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Twin_Dragon_Greatshield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(101, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(168, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Twin_Dragon_Greatshield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Twin_Dragon_Greatshield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(120, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Twin_Dragon_Greatshield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(144, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Twin_Dragon_Greatshield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(98, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Twin_Dragon_Greatshield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(165, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Twin_Dragon_Greatshield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Twin_Dragon_Greatshield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Twin_Dragon_Greatshield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(127, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Twin_Princes_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Twin Princes' Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(152, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Uchigatana_None){
const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(138, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Uchigatana_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Uchigatana_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Uchigatana_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(124, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Uchigatana_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(140, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Uchigatana_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(124, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Uchigatana_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(194, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Uchigatana_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(194, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Uchigatana_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Uchigatana_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(131, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Uchigatana_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(140, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Uchigatana_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Uchigatana_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(171, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Uchigatana_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(124, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Uchigatana_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(127, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Uchigatana_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(124, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Valorheart_None){
const auto& [damage, status] = calculator::AttackRating(db, "Valorheart", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Vordts_Great_Hammer_None){
const auto& [damage, status] = calculator::AttackRating(db, "Vordt's Great Hammer", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(192, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(110, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warden_Twinblades_None){
const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(111, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warden_Twinblades_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warden_Twinblades_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warden_Twinblades_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(61, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(106, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warden_Twinblades_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(120, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warden_Twinblades_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(61, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(106, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warden_Twinblades_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(172, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warden_Twinblades_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(172, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warden_Twinblades_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warden_Twinblades_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warden_Twinblades_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(120, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warden_Twinblades_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warden_Twinblades_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(152, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warden_Twinblades_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(100, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warden_Twinblades_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(103, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warden_Twinblades_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(61, static_cast<int>(damage.physical));EXPECT_EQ(106, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wargod_Wooden_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wargod_Wooden_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wargod_Wooden_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wargod_Wooden_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(111, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wargod_Wooden_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(126, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wargod_Wooden_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(111, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wargod_Wooden_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(144, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wargod_Wooden_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(144, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wargod_Wooden_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wargod_Wooden_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(100, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wargod_Wooden_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(126, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wargod_Wooden_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(81, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wargod_Wooden_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(137, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wargod_Wooden_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(95, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wargod_Wooden_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wargod_Wooden_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(111, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warpick_None){
const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(135, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warpick_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warpick_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warpick_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(135, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warpick_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(153, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warpick_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(135, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warpick_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(125, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(209, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warpick_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(125, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(209, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warpick_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(125, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warpick_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(128, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warpick_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(153, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warpick_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warpick_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(199, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warpick_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(118, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warpick_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(125, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warpick_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(135, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warriors_Round_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warriors_Round_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warriors_Round_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warriors_Round_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(54, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(95, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warriors_Round_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(107, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warriors_Round_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(54, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(95, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warriors_Round_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(118, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warriors_Round_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(118, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warriors_Round_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warriors_Round_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warriors_Round_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(64, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(107, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warriors_Round_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(68, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warriors_Round_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warriors_Round_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(79, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warriors_Round_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(82, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Warriors_Round_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(54, static_cast<int>(damage.physical));EXPECT_EQ(95, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Washing_Pole_None){
const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(145, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Washing_Pole_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Washing_Pole_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(112, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(59, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Washing_Pole_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(125, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Washing_Pole_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(141, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Washing_Pole_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(125, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Washing_Pole_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(192, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Washing_Pole_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(115, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(192, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Washing_Pole_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(134, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Washing_Pole_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(137, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Washing_Pole_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(85, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(141, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Washing_Pole_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(112, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Washing_Pole_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(170, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Washing_Pole_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(130, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Washing_Pole_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(134, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Washing_Pole_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(71, static_cast<int>(damage.physical));EXPECT_EQ(125, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(30, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Whip_None){
const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Whip_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Whip_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Whip_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(63, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(110, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Whip_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(124, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Whip_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(63, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(110, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Whip_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(173, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Whip_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(104, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(173, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Whip_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Whip_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Whip_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(124, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Whip_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(83, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Whip_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(154, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Whip_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(97, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Whip_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Whip_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(63, static_cast<int>(damage.physical));EXPECT_EQ(110, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, White_Birch_Bow_None){
const auto& [damage, status] = calculator::AttackRating(db, "White Birch Bow", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, White_Hair_Talisman_None){
const auto& [damage, status] = calculator::AttackRating(db, "White Hair Talisman", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(76, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(82, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Halberd_None){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(174, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Halberd_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Halberd_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(134, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(61, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Halberd_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(172, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Halberd_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(195, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Halberd_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(172, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Halberd_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(147, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(246, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Halberd_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(147, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(246, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Halberd_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(160, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Halberd_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(165, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Halberd_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(117, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(195, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Halberd_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(134, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(71, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Halberd_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(246, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Halberd_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(152, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Halberd_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(160, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Halberd_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(99, static_cast<int>(damage.physical));EXPECT_EQ(172, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Twinaxes_None){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(146, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Twinaxes_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Twinaxes_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(113, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Twinaxes_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(132, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Twinaxes_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(149, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Twinaxes_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(132, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Twinaxes_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(210, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Twinaxes_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(126, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(210, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Twinaxes_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(135, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Twinaxes_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(139, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Twinaxes_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(89, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(149, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Twinaxes_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(113, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Twinaxes_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(188, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Twinaxes_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(128, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Twinaxes_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(135, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Knight_Twinaxes_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(132, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Spear_None){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(114, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Spear_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Spear_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Spear_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(109, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Spear_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(123, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Spear_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(109, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Spear_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(194, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Spear_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(116, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(194, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Spear_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Spear_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(108, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Spear_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(74, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(123, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Spear_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Spear_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(179, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Spear_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(102, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Spear_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(105, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Winged_Spear_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(62, static_cast<int>(damage.physical));EXPECT_EQ(109, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Witchs_Locks_None){
const auto& [damage, status] = calculator::AttackRating(db, "Witch's Locks", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(80, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(84, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Witchtree_Branch_None){
const auto& [damage, status] = calculator::AttackRating(db, "Witchtree Branch", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(77, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wolf_Knights_Greatshield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Wolf Knight's Greatshield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(129, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wolf_Knights_Greatsword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Wolf Knight's Greatsword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(152, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wolnirs_Holy_Sword_None){
const auto& [damage, status] = calculator::AttackRating(db, "Wolnir's Holy Sword", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(165, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wooden_Shield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(93, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wooden_Shield_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wooden_Shield_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(51, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wooden_Shield_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(100, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wooden_Shield_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(113, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wooden_Shield_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(100, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wooden_Shield_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(125, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wooden_Shield_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(75, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(125, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wooden_Shield_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wooden_Shield_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(88, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wooden_Shield_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(67, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(113, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wooden_Shield_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(72, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(57, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wooden_Shield_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(121, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wooden_Shield_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(84, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wooden_Shield_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(86, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Wooden_Shield_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(57, static_cast<int>(damage.physical));EXPECT_EQ(100, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Yhorms_Great_Machete_None){
const auto& [damage, status] = calculator::AttackRating(db, "Yhorm's Great Machete", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(202, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Yhorms_Greatshield_None){
const auto& [damage, status] = calculator::AttackRating(db, "Yhorm's Greatshield", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(144, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Yorshkas_Chime_None){
const auto& [damage, status] = calculator::AttackRating(db, "Yorshka's Chime", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(73, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Yorshkas_Spear_None){
const auto& [damage, status] = calculator::AttackRating(db, "Yorshka's Spear", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(106, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Zweihander_None){
const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::None, 10, attribs);EXPECT_EQ(174, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Zweihander_Blessed){
const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Blessed, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Zweihander_Blood){
const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Blood, 10, attribs);EXPECT_EQ(134, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(73, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Zweihander_Chaos){
const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Chaos, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(161, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Zweihander_Crystal){
const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Crystal, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(182, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Zweihander_Dark){
const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Dark, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(161, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Zweihander_Deep){
const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Deep, 10, attribs);EXPECT_EQ(146, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(244, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Zweihander_Fire){
const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Fire, 10, attribs);EXPECT_EQ(146, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(244, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Zweihander_Heavy){
const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Heavy, 10, attribs);EXPECT_EQ(160, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Zweihander_Hollow){
const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Hollow, 10, attribs);EXPECT_EQ(165, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Zweihander_Lightning){
const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Lightning, 10, attribs);EXPECT_EQ(109, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(182, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Zweihander_Poison){
const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Poison, 10, attribs);EXPECT_EQ(134, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(96, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Zweihander_Raw){
const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Raw, 10, attribs);EXPECT_EQ(244, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Zweihander_Refined){
const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Refined, 10, attribs);EXPECT_EQ(156, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Zweihander_Sharp){
const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Sharp, 10, attribs);EXPECT_EQ(160, static_cast<int>(damage.physical));EXPECT_EQ(0, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}

TEST_F(Lowest_1_1_1_1_1, Zweihander_Simple){
const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Simple, 10, attribs);EXPECT_EQ(92, static_cast<int>(damage.physical));EXPECT_EQ(161, static_cast<int>(damage.magic));EXPECT_EQ(0, static_cast<int>(damage.fire));EXPECT_EQ(0, static_cast<int>(damage.lightning));EXPECT_EQ(0, static_cast<int>(damage.dark));EXPECT_EQ(0, static_cast<int>(status.bleed));EXPECT_EQ(0, static_cast<int>(status.poison));EXPECT_EQ(0, static_cast<int>(status.frost));}