#include <gtest/gtest.h>
#include <Calculator.h>
using namespace invbuilder;
class Quality_40_40_11_15_7 : public ::testing::Test{
protected:
static Database db;
static PlayerAttributes attribs;
};
Database Quality_40_40_11_15_7::db = Database::Create();
PlayerAttributes Quality_40_40_11_15_7::attribs = {40.f,40.f,11.f,15.f,7.f};


TEST_F(Quality_40_40_11_15_7, Ancient_Dragon_Greatshield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Ancient Dragon Greatshield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(207, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Anris_Straight_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Anri's Straight Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(286, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Aquamarine_Dagger){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Aquamarine Dagger", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(183, static_cast<int>(damage.physical));
	EXPECT_EQ(70, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Arbalest){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Arbalest", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(273, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Archdeacons_Great_Staff){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Archdeacon's Great Staff", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(190, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Arstors_Spear){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Arstor's Spear", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(397, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Astora_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(530, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(364, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(410, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(74, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(275, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(249, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(295, static_cast<int>(damage.physical));
	EXPECT_EQ(199, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(275, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(249, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(253, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(253, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(253, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(253, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(472, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(511, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(295, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(216, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(410, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(98, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(421, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(532, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(558, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Greatsword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(280, static_cast<int>(damage.physical));
	EXPECT_EQ(179, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Astora_Straight_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(382, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(248, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(296, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(195, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(186, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(173, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(195, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(186, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(192, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(192, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(336, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(372, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(180, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(296, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(301, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(377, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(366, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Astora Straight Sword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(197, static_cast<int>(damage.physical));
	EXPECT_EQ(154, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Avelyn){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Avelyn", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(128, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Bandits_Knife){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(249, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(193, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(59, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(152, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(143, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(168, static_cast<int>(damage.physical));
	EXPECT_EQ(129, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(152, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(143, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(146, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(146, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(146, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(146, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(240, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(250, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(168, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(136, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(193, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(260, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(261, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Bandit's Knife", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(137, static_cast<int>(damage.physical));
	EXPECT_EQ(102, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Barbed_Straight_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(399, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(264, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(309, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(60, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(202, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(186, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(219, static_cast<int>(damage.physical));
	EXPECT_EQ(157, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(202, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(186, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(194, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(194, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(194, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(194, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(353, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(384, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(219, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(168, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(309, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(286, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(414, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(403, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Barbed Straight Sword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(141, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Bastard_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(493, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(338, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(382, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(62, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(259, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(239, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(281, static_cast<int>(damage.physical));
	EXPECT_EQ(202, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(259, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(239, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(233, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(233, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(233, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(233, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(479, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(474, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(281, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(216, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(382, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(72, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(374, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(496, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(495, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Bastard Sword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(263, static_cast<int>(damage.physical));
	EXPECT_EQ(181, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Battle_Axe){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(433, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(293, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(336, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(209, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(246, static_cast<int>(damage.physical));
	EXPECT_EQ(179, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(231, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(214, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(209, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(209, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(203, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(203, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(410, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(416, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(252, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(196, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(336, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(330, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(439, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(423, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Battle Axe", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(229, static_cast<int>(damage.physical));
	EXPECT_EQ(160, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Black_Blade){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(407, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(269, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(316, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(60, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(208, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(194, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(228, static_cast<int>(damage.physical));
	EXPECT_EQ(170, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(208, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(194, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(207, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(207, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(207, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(207, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(366, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(393, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(228, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(180, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(316, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(306, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(401, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(414, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Blade", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(211, static_cast<int>(damage.physical));
	EXPECT_EQ(152, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Black_Bow_of_Pharis){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Bow of Pharis", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(246, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Black_Iron_Greatshield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(306, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(218, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(237, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(61, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(174, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(169, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(196, static_cast<int>(damage.physical));
	EXPECT_EQ(163, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(174, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(169, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(179, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(179, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(348, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(292, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(196, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(169, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(237, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(71, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(291, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(323, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(267, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Iron Greatshield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(175, static_cast<int>(damage.physical));
	EXPECT_EQ(145, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Black_Knight_Glaive){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Knight Glaive", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(499, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Black_Knight_Greataxe){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Knight Greataxe", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(647, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Black_Knight_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Knight Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(612, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Black_Knight_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Knight Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(262, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Black_Knight_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Black Knight Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(542, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Blacksmith_Hammer){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(340, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(255, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(263, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(198, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(186, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(218, static_cast<int>(damage.physical));
	EXPECT_EQ(165, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(198, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(186, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(209, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(209, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(209, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(209, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(366, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(325, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(218, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(175, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(263, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(319, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(354, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(375, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Blacksmith Hammer", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(201, static_cast<int>(damage.physical));
	EXPECT_EQ(148, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Bloodlust){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Bloodlust", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(348, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(34, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Blue_Wooden_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(200, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(152, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(155, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(122, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(120, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(138, static_cast<int>(damage.physical));
	EXPECT_EQ(118, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(122, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(120, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(123, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(123, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(123, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(123, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(223, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(191, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(138, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(122, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(155, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(200, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(213, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(176, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Blue Wooden Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(123, static_cast<int>(damage.physical));
	EXPECT_EQ(105, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Bonewheel_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(303, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(217, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(235, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(61, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(172, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(167, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(194, static_cast<int>(damage.physical));
	EXPECT_EQ(162, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(172, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(167, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(177, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(177, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(345, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(289, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(194, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(168, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(235, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(71, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(288, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(320, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(264, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Bonewheel Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(174, static_cast<int>(damage.physical));
	EXPECT_EQ(144, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Brigand_Axe){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(432, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(300, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(335, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(230, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(213, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(251, static_cast<int>(damage.physical));
	EXPECT_EQ(183, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(208, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(205, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(210, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(210, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(406, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(415, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(245, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(190, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(335, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(335, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(435, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(423, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Axe", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(234, static_cast<int>(damage.physical));
	EXPECT_EQ(164, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Brigand_Twindaggers){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(242, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(242, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(188, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(154, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(143, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(168, static_cast<int>(damage.physical));
	EXPECT_EQ(122, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(154, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(143, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(148, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(148, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(148, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(148, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(217, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(246, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(168, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(130, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(188, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(208, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(245, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(257, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Brigand Twindaggers", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(156, static_cast<int>(damage.physical));
	EXPECT_EQ(110, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Broadsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(433, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(293, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(335, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(224, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(205, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(242, static_cast<int>(damage.physical));
	EXPECT_EQ(171, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(224, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(205, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(212, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(212, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(212, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(212, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(397, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(417, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(242, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(184, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(335, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(322, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(446, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(435, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Broadsword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(227, static_cast<int>(damage.physical));
	EXPECT_EQ(153, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Broken_Straight_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(242, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(195, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(188, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(150, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(139, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(164, static_cast<int>(damage.physical));
	EXPECT_EQ(119, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(150, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(139, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(138, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(138, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(138, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(138, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(233, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(164, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(127, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(188, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(195, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(253, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(242, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Broken Straight Sword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(152, static_cast<int>(damage.physical));
	EXPECT_EQ(107, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Buckler){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(160, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(119, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(124, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(97, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(97, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(111, static_cast<int>(damage.physical));
	EXPECT_EQ(100, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(97, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(97, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(105, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(105, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(105, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(105, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(169, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(153, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(111, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(102, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(124, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(174, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(171, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(162, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Buckler", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(97, static_cast<int>(damage.physical));
	EXPECT_EQ(88, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Butcher_Knife){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Butcher Knife", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(397, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Caduceus_Round_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(166, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(126, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(129, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(103, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(102, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(118, static_cast<int>(damage.physical));
	EXPECT_EQ(105, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(103, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(102, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(109, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(109, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(109, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(109, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(159, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(118, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(108, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(129, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(148, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Caduceus Round Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(103, static_cast<int>(damage.physical));
	EXPECT_EQ(93, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Caestus){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(334, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(245, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(259, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(187, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(172, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(202, static_cast<int>(damage.physical));
	EXPECT_EQ(143, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(187, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(172, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(177, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(177, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(316, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(322, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(202, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(154, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(259, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(262, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(347, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(336, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Caestus", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(190, static_cast<int>(damage.physical));
	EXPECT_EQ(128, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Caithas_Chime){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Caitha's Chime", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(157, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Canvas_Talisman){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Canvas Talisman", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(144, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Carthus_Curved_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(502, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(352, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(389, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(72, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(266, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(241, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(286, static_cast<int>(damage.physical));
	EXPECT_EQ(193, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(266, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(241, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(240, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(240, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(240, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(240, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(465, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(484, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(286, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(210, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(389, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(72, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(364, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(517, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(521, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Greatsword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(271, static_cast<int>(damage.physical));
	EXPECT_EQ(173, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Carthus_Curved_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(388, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(262, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(301, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(60, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(200, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(183, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(152, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(200, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(183, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(185, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(185, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(345, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(374, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(164, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(301, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(273, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(390, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(393, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Curved Sword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(203, static_cast<int>(damage.physical));
	EXPECT_EQ(137, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Carthus_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(147, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(127, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(114, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(101, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(99, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(115, static_cast<int>(damage.physical));
	EXPECT_EQ(98, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(101, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(99, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(94, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(94, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(94, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(94, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(164, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(140, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(115, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(101, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(114, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(145, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(157, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(129, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(102, static_cast<int>(damage.physical));
	EXPECT_EQ(87, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Carthus_Shotel){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(374, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(264, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(290, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(60, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(202, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(187, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(159, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(202, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(187, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(196, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(196, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(196, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(196, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(356, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(360, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(170, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(290, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(288, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(387, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(386, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Carthus Shotel", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(143, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Cathedral_Knight_Greatshield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(306, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(218, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(237, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(61, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(174, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(169, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(196, static_cast<int>(damage.physical));
	EXPECT_EQ(163, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(174, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(169, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(179, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(179, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(348, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(292, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(196, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(169, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(237, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(71, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(291, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(323, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(267, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatshield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(175, static_cast<int>(damage.physical));
	EXPECT_EQ(145, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Cathedral_Knight_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(517, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(351, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(400, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(74, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(270, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(251, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(295, static_cast<int>(damage.physical));
	EXPECT_EQ(215, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(270, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(251, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(257, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(257, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(257, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(257, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(532, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(497, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(295, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(230, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(400, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(97, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(426, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(553, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(553, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Cathedral Knight Greatsword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(274, static_cast<int>(damage.physical));
	EXPECT_EQ(193, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Chaos_Blade){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Chaos Blade", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(420, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(34, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Claw){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(300, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(226, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(232, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(60, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(173, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(161, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(189, static_cast<int>(damage.physical));
	EXPECT_EQ(138, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(173, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(161, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(168, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(168, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(168, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(168, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(289, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(289, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(189, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(147, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(232, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(249, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(319, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(320, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Claw", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(176, static_cast<int>(damage.physical));
	EXPECT_EQ(123, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Claymore){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(493, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(338, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(382, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(62, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(259, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(239, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(281, static_cast<int>(damage.physical));
	EXPECT_EQ(202, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(259, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(239, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(233, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(233, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(233, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(233, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(479, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(474, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(281, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(216, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(382, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(72, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(374, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(496, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(495, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Claymore", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(263, static_cast<int>(damage.physical));
	EXPECT_EQ(181, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Clerics_Candlestick){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Cleric's Candlestick", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(170, static_cast<int>(damage.physical));
	EXPECT_EQ(126, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Clerics_Sacred_Chime){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Cleric's Sacred Chime", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(144, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Club){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(363, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(266, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(281, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(206, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(192, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(167, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(206, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(192, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(199, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(199, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(199, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(199, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(394, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(348, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(178, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(281, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(319, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(381, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(393, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Club", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(209, static_cast<int>(damage.physical));
	EXPECT_EQ(150, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Composite_Bow){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Composite Bow", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(247, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Corvian_Greatknife){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(256, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(194, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(198, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(154, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(149, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(173, static_cast<int>(damage.physical));
	EXPECT_EQ(144, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(154, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(149, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(153, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(153, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(153, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(153, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(232, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(245, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(173, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(149, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(198, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(223, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(272, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(260, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Corvian Greatknife", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(156, static_cast<int>(damage.physical));
	EXPECT_EQ(128, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Court_Sorcerers_Staff){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Court Sorcerer's Staff", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(163, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Crescent_Axe){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(427, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(289, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(331, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(62, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(221, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(204, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(241, static_cast<int>(damage.physical));
	EXPECT_EQ(172, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(221, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(204, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(210, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(210, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(210, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(210, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(396, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(411, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(241, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(185, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(331, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(72, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(322, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(444, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(441, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Crescent Axe", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(154, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Crescent_Moon_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Crescent Moon Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(224, static_cast<int>(damage.physical));
	EXPECT_EQ(150, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Crest_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Crest Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Crimson_Parma){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(166, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(126, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(129, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(103, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(102, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(118, static_cast<int>(damage.physical));
	EXPECT_EQ(105, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(103, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(102, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(109, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(109, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(109, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(109, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(159, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(118, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(108, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(129, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(148, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Crimson Parma", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(103, static_cast<int>(damage.physical));
	EXPECT_EQ(93, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Crow_Quills){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(360, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(263, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(279, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(195, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(179, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(211, static_cast<int>(damage.physical));
	EXPECT_EQ(149, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(195, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(179, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(186, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(186, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(186, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(186, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(322, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(347, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(211, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(160, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(279, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(283, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(373, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(380, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Quills", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(204, static_cast<int>(damage.physical));
	EXPECT_EQ(138, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Crow_Talons){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(315, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(237, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(244, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(60, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(182, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(169, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(198, static_cast<int>(damage.physical));
	EXPECT_EQ(145, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(182, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(169, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(177, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(177, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(293, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(304, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(198, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(154, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(244, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(262, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(338, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(347, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Crow Talons", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(130, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Crucifix_of_the_Mad_King){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Crucifix of the Mad King", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(325, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(143, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Crystal_Chime){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Crystal Chime", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(154, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Crystal_Sages_Rapier){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Crystal Sage's Rapier", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(136, static_cast<int>(damage.physical));
	EXPECT_EQ(170, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Curse_Ward_Greatshield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Curse Ward Greatshield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(311, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Dagger){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(239, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(239, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(149, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(137, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(161, static_cast<int>(damage.physical));
	EXPECT_EQ(114, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(149, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(137, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(148, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(148, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(148, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(148, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(232, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(243, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(161, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(122, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(195, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(255, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(271, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Dagger", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(151, static_cast<int>(damage.physical));
	EXPECT_EQ(102, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Dancers_Enchanted_Swords){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Dancer's Enchanted Swords", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(236, static_cast<int>(damage.physical));
	EXPECT_EQ(194, static_cast<int>(damage.magic));
	EXPECT_EQ(205, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Dark_Hand){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Dark Hand", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(178, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Dark_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(409, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(277, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(317, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(211, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(193, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(228, static_cast<int>(damage.physical));
	EXPECT_EQ(160, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(211, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(193, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(194, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(194, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(194, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(194, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(393, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(394, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(228, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(173, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(317, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(299, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(428, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(405, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Dark Sword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(214, static_cast<int>(damage.physical));
	EXPECT_EQ(144, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Darkdrift){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Darkdrift", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(383, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(34, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Darkmoon_Longbow){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Darkmoon Longbow", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(80, static_cast<int>(damage.physical));
	EXPECT_EQ(88, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Demons_Fist){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Demon's Fist", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(297, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(152, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Demons_Greataxe){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Demon's Greataxe", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(508, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(96, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Demons_Scar){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Demon's Scar", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(0, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(108, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Dragon_Crest_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragon Crest Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Dragon_Tooth){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragon Tooth", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(568, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Dragonhead_Greatshield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonhead Greatshield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(361, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Dragonhead_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonhead Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(268, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(23, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Dragonrider_Bow){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonrider Bow", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(296, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Dragonslayer_Greataxe){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer Greataxe", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(574, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(149, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Dragonslayer_Greatbow){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer Greatbow", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(416, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Dragonslayer_Greatshield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer Greatshield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(336, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Dragonslayer_Spear){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer Spear", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(332, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(130, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Dragonslayer_Swordspear){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer Swordspear", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(430, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(37, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Dragonslayers_Axe){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(284, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(210, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(244, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(155, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(162, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(180, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(180, static_cast<int>(damage.fire));
	EXPECT_EQ(115, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(183, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(105, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(180, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(115, static_cast<int>(damage.lightning));
	EXPECT_EQ(180, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(105, static_cast<int>(damage.lightning));
	EXPECT_EQ(185, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(185, static_cast<int>(damage.fire));
	EXPECT_EQ(105, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(285, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(210, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(272, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(199, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(158, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(257, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(162, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(273, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(210, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(285, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(210, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(303, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(210, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Dragonslayer's Axe", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(194, static_cast<int>(damage.physical));
	EXPECT_EQ(163, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(105, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Drakeblood_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(290, static_cast<int>(damage.physical));
	EXPECT_EQ(142, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(142, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(278, static_cast<int>(damage.physical));
	EXPECT_EQ(92, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(112, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(224, static_cast<int>(damage.physical));
	EXPECT_EQ(110, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(110, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(61, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(213, static_cast<int>(damage.physical));
	EXPECT_EQ(78, static_cast<int>(damage.magic));
	EXPECT_EQ(200, static_cast<int>(damage.fire));
	EXPECT_EQ(81, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(172, static_cast<int>(damage.physical));
	EXPECT_EQ(242, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(71, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(213, static_cast<int>(damage.physical));
	EXPECT_EQ(78, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(81, static_cast<int>(damage.lightning));
	EXPECT_EQ(200, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(71, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(71, static_cast<int>(damage.lightning));
	EXPECT_EQ(220, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(71, static_cast<int>(damage.magic));
	EXPECT_EQ(220, static_cast<int>(damage.fire));
	EXPECT_EQ(71, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(277, static_cast<int>(damage.physical));
	EXPECT_EQ(142, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(142, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(278, static_cast<int>(damage.physical));
	EXPECT_EQ(134, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(134, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(172, static_cast<int>(damage.physical));
	EXPECT_EQ(71, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(256, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(224, static_cast<int>(damage.physical));
	EXPECT_EQ(110, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(110, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(72, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(231, static_cast<int>(damage.physical));
	EXPECT_EQ(142, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(142, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(303, static_cast<int>(damage.physical));
	EXPECT_EQ(142, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(142, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(305, static_cast<int>(damage.physical));
	EXPECT_EQ(142, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(142, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Drakeblood Greatsword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(159, static_cast<int>(damage.physical));
	EXPECT_EQ(216, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(71, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Drang_Hammers){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(370, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(266, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(286, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(206, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(192, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(167, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(206, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(192, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(203, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(203, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(203, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(203, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(393, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(354, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(178, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(286, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(312, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(420, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(396, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Hammers", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(209, static_cast<int>(damage.physical));
	EXPECT_EQ(150, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Drang_Twinspears){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(382, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(258, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(296, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(196, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(179, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(212, static_cast<int>(damage.physical));
	EXPECT_EQ(146, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(196, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(179, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(185, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(185, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(340, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(368, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(212, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(158, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(296, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(286, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(373, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(377, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Drang Twinspears", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(199, static_cast<int>(damage.physical));
	EXPECT_EQ(131, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Earth_Seeker){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Earth Seeker", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(503, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, EastWest_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(198, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(150, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(153, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(120, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(118, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(136, static_cast<int>(damage.physical));
	EXPECT_EQ(117, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(120, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(118, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(122, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(122, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(122, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(122, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(189, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(136, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(120, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(153, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(197, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(210, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(174, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "East-West Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(121, static_cast<int>(damage.physical));
	EXPECT_EQ(104, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Eastern_Iron_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(197, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(147, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(153, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(120, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(119, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(137, static_cast<int>(damage.physical));
	EXPECT_EQ(122, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(120, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(119, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(131, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(131, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(131, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(131, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(211, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(188, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(137, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(125, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(153, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(210, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(211, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(175, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Eastern Iron Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(120, static_cast<int>(damage.physical));
	EXPECT_EQ(108, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Eleonora){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Eleonora", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(421, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Elkhorn_Round_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(166, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(126, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(129, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(103, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(102, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(118, static_cast<int>(damage.physical));
	EXPECT_EQ(105, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(103, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(102, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(109, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(109, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(109, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(109, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(159, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(118, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(108, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(129, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(148, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Elkhorn Round Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(103, static_cast<int>(damage.physical));
	EXPECT_EQ(93, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Estoc){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(375, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(244, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(290, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(187, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(173, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(204, static_cast<int>(damage.physical));
	EXPECT_EQ(146, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(187, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(173, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(183, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(183, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(183, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(183, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(334, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(361, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(204, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(157, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(290, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(270, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(377, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(386, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Estoc", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(190, static_cast<int>(damage.physical));
	EXPECT_EQ(131, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Ethereal_Oak_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Ethereal Oak Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(236, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Executioners_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Executioner's Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(495, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Exile_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(560, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(395, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(434, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(74, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(300, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(275, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(325, static_cast<int>(damage.physical));
	EXPECT_EQ(226, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(300, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(275, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(264, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(264, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(264, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(264, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(562, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(539, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(325, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(244, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(434, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(98, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(423, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(576, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(544, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Exile Greatsword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(306, static_cast<int>(damage.physical));
	EXPECT_EQ(203, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Falchion){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(405, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(280, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(314, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(200, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(235, static_cast<int>(damage.physical));
	EXPECT_EQ(172, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(200, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(212, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(212, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(212, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(212, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(376, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(390, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(235, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(183, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(314, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(338, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(422, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(420, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Falchion", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(219, static_cast<int>(damage.physical));
	EXPECT_EQ(154, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Farron_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Farron Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(566, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Firelink_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Firelink Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(381, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(162, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Flamberge){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(468, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(315, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(363, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(71, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(248, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(237, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(281, static_cast<int>(damage.physical));
	EXPECT_EQ(224, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(248, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(237, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(227, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(227, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(227, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(227, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(463, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(449, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(276, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(230, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(363, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(71, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(371, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(494, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(499, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Flamberge", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(256, static_cast<int>(damage.physical));
	EXPECT_EQ(200, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(36, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Follower_Javelin){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(390, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(263, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(302, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(201, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(184, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(217, static_cast<int>(damage.physical));
	EXPECT_EQ(154, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(201, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(184, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(196, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(196, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(196, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(196, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(387, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(375, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(217, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(165, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(302, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(301, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(404, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(396, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Javelin", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(204, static_cast<int>(damage.physical));
	EXPECT_EQ(138, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Follower_Sabre){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(397, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(268, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(308, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(188, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(222, static_cast<int>(damage.physical));
	EXPECT_EQ(157, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(188, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(190, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(190, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(190, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(190, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(359, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(382, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(222, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(168, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(308, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(280, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(401, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(394, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Sabre", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(208, static_cast<int>(damage.physical));
	EXPECT_EQ(141, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Follower_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(217, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(163, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(168, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(131, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(129, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(148, static_cast<int>(damage.physical));
	EXPECT_EQ(128, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(131, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(129, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(136, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(136, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(136, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(136, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(240, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(207, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(148, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(131, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(168, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(218, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(232, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(224, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(132, static_cast<int>(damage.physical));
	EXPECT_EQ(114, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Follower_Torch){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Follower Torch", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(294, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(142, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, FourPronged_Plow){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(388, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(280, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(301, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(214, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(196, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(232, static_cast<int>(damage.physical));
	EXPECT_EQ(163, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(214, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(196, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(203, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(203, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(203, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(203, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(360, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(374, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(232, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(175, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(301, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(312, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(400, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(392, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Four-Pronged Plow", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(217, static_cast<int>(damage.physical));
	EXPECT_EQ(146, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Frayed_Blade){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Frayed Blade", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(396, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(76, static_cast<int>(damage.dark));
	EXPECT_EQ(34, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Friedes_Great_Scythe){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Friede's Great Scythe", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(405, static_cast<int>(damage.physical));
	EXPECT_EQ(84, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(45, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Fume_Ultra_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Fume Ultra Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(156, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Gaels_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Gael's Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(504, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Gargoyle_Flame_Hammer){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Gargoyle Flame Hammer", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(372, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(218, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Gargoyle_Flame_Spear){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Gargoyle Flame Spear", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(283, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(181, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Ghru_Rotshield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(188, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(141, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(146, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(44, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(115, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(114, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(131, static_cast<int>(damage.physical));
	EXPECT_EQ(118, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(115, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(114, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(125, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(125, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(125, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(125, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(200, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(131, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(120, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(146, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(202, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(203, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(191, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Ghru Rotshield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(115, static_cast<int>(damage.physical));
	EXPECT_EQ(104, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Giant_Door_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(128, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(88, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(99, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(61, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(75, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(189, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(88, static_cast<int>(damage.physical));
	EXPECT_EQ(167, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(75, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(189, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(120, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(201, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(120, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(201, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(118, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(121, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(88, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(177, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(99, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(71, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(201, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(115, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(118, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Giant Door Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(75, static_cast<int>(damage.physical));
	EXPECT_EQ(149, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Glaive){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(447, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(307, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(347, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(61, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(239, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(225, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(264, static_cast<int>(damage.physical));
	EXPECT_EQ(202, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(239, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(225, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(223, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(223, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(223, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(223, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(454, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(429, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(264, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(213, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(347, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(71, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(366, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(483, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(475, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Glaive", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(242, static_cast<int>(damage.physical));
	EXPECT_EQ(181, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Golden_Falcon_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(180, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(136, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(139, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(110, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(110, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(126, static_cast<int>(damage.physical));
	EXPECT_EQ(112, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(110, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(110, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(118, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(118, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(118, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(118, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(172, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(126, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(115, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(139, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(160, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Golden Falcon Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(111, static_cast<int>(damage.physical));
	EXPECT_EQ(100, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Golden_Ritual_Spear){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Golden Ritual Spear", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(197, static_cast<int>(damage.physical));
	EXPECT_EQ(134, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Golden_Wing_Crest_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Golden Wing Crest Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(235, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Gotthard_Twinswords){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(378, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(268, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(293, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(204, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(187, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(221, static_cast<int>(damage.physical));
	EXPECT_EQ(154, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(204, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(187, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(188, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(188, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(188, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(188, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(347, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(364, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(221, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(166, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(293, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(283, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(389, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(387, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Gotthard Twinswords", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(208, static_cast<int>(damage.physical));
	EXPECT_EQ(138, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Grass_Crest_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Grass Crest Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(210, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Great_Club){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(517, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(351, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(401, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(74, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(271, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(252, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(296, static_cast<int>(damage.physical));
	EXPECT_EQ(219, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(271, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(252, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(264, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(264, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(264, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(264, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(551, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(498, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(296, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(232, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(401, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(97, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(449, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(559, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(541, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Club", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(275, static_cast<int>(damage.physical));
	EXPECT_EQ(196, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Great_Corvian_Scythe){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(409, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(38, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(294, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(38, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(317, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(60, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(221, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(198, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(38, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(236, static_cast<int>(damage.physical));
	EXPECT_EQ(155, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(38, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(221, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(198, static_cast<int>(damage.dark));
	EXPECT_EQ(38, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(207, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(207, static_cast<int>(damage.dark));
	EXPECT_EQ(38, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(207, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(207, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(38, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(343, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(38, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(395, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(38, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(236, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(169, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(38, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(317, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(39, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(317, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(38, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(420, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(38, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(422, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(38, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Corvian Scythe", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(139, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(38, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Great_Mace){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(564, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(370, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(437, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(74, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(289, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(275, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(321, static_cast<int>(damage.physical));
	EXPECT_EQ(252, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(289, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(275, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(296, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(296, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(296, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(296, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(573, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(541, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(330, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(272, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(437, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(97, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(494, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(557, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(580, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Mace", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(293, static_cast<int>(damage.physical));
	EXPECT_EQ(225, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Great_Machete){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(544, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(357, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(421, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(74, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(277, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(260, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(305, static_cast<int>(damage.physical));
	EXPECT_EQ(230, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(277, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(260, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(271, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(271, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(271, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(271, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(555, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(523, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(305, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(244, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(421, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(97, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(439, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(568, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(577, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Machete", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(281, static_cast<int>(damage.physical));
	EXPECT_EQ(206, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Great_Scythe){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(386, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(268, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(299, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(60, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(188, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(222, static_cast<int>(damage.physical));
	EXPECT_EQ(157, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(188, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(203, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(203, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(203, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(203, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(345, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(372, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(222, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(168, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(299, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(299, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(400, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(398, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Scythe", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(208, static_cast<int>(damage.physical));
	EXPECT_EQ(141, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Great_Wooden_Hammer){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(410, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(298, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(317, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(74, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(231, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(216, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(254, static_cast<int>(damage.physical));
	EXPECT_EQ(191, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(231, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(216, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(240, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(240, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(240, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(240, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(442, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(394, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(254, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(202, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(317, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(97, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(390, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(425, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(438, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Great Wooden Hammer", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(234, static_cast<int>(damage.physical));
	EXPECT_EQ(171, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Greataxe){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(612, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(399, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(474, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(74, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(309, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(290, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(340, static_cast<int>(damage.physical));
	EXPECT_EQ(257, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(309, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(290, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(283, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(283, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(283, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(283, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(599, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(589, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(340, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(272, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(474, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(97, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(501, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(619, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(621, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Greataxe", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(313, static_cast<int>(damage.physical));
	EXPECT_EQ(229, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Greatlance){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(463, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(310, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(359, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(237, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(219, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(258, static_cast<int>(damage.physical));
	EXPECT_EQ(184, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(237, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(219, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(220, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(220, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(452, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(446, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(266, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(204, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(359, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(361, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(470, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(473, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatlance", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(241, static_cast<int>(damage.physical));
	EXPECT_EQ(165, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Greatshield_of_Glory){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatshield of Glory", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(322, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(585, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(401, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(453, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(74, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(306, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(281, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(332, static_cast<int>(damage.physical));
	EXPECT_EQ(235, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(306, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(281, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(284, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(284, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(284, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(284, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(580, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(563, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(332, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(252, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(453, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(98, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(478, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(590, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(579, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatsword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(311, static_cast<int>(damage.physical));
	EXPECT_EQ(210, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Greatsword_of_Judgment){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Greatsword of Judgment", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(349, static_cast<int>(damage.physical));
	EXPECT_EQ(94, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Gundyrs_Halberd){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Gundyr's Halberd", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(477, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Halberd){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(460, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(312, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(356, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(62, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(238, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(219, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(258, static_cast<int>(damage.physical));
	EXPECT_EQ(183, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(238, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(219, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(222, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(222, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(222, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(222, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(416, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(442, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(258, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(196, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(356, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(72, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(364, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(477, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(466, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Halberd", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(242, static_cast<int>(damage.physical));
	EXPECT_EQ(164, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Hand_Axe){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(404, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(278, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(313, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(213, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(195, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(230, static_cast<int>(damage.physical));
	EXPECT_EQ(163, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(213, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(195, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(207, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(207, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(207, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(207, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(386, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(389, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(230, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(175, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(313, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(304, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(410, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(398, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Hand Axe", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(146, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Handmaids_Dagger){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Handmaid's Dagger", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Harald_Curved_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(529, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(389, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(410, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(62, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(296, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(271, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(320, static_cast<int>(damage.physical));
	EXPECT_EQ(223, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(296, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(271, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(259, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(259, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(259, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(259, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(536, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(510, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(320, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(240, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(410, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(72, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(442, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(545, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(540, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Harald Curved Greatsword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(301, static_cast<int>(damage.physical));
	EXPECT_EQ(200, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Harpe){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(222, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(232, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(172, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(145, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(134, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(158, static_cast<int>(damage.physical));
	EXPECT_EQ(113, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(145, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(134, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(142, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(142, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(142, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(142, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(215, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(226, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(158, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(121, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(172, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(187, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(244, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(251, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Harpe", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(148, static_cast<int>(damage.physical));
	EXPECT_EQ(101, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Havels_Greatshield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Havel's Greatshield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(347, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Hawkwoods_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(174, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(131, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(135, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(107, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(106, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(122, static_cast<int>(damage.physical));
	EXPECT_EQ(109, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(107, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(106, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(114, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(114, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(114, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(114, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(166, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(122, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(112, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(135, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(187, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(187, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Hawkwood's Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(107, static_cast<int>(damage.physical));
	EXPECT_EQ(97, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Heavy_Crossbow){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Heavy Crossbow", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(252, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Heretics_Staff){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Heretic's Staff", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(173, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Heysel_Pick){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Heysel Pick", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(231, static_cast<int>(damage.physical));
	EXPECT_EQ(73, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Hollowslayer_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Hollowslayer Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(516, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Immolation_Tinder){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Immolation Tinder", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(370, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(79, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Irithyll_Rapier){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Irithyll Rapier", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(395, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(55, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Irithyll_Straight_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Irithyll Straight Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(388, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(55, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Iron_Round_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(171, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(130, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(133, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(105, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(105, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(121, static_cast<int>(damage.physical));
	EXPECT_EQ(108, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(105, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(105, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(112, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(112, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(112, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(112, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(182, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(163, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(121, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(110, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(133, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(184, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(174, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Iron Round Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(106, static_cast<int>(damage.physical));
	EXPECT_EQ(96, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Izalith_Staff){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Izalith Staff", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(344, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Kite_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(210, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(159, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(163, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(127, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(125, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(144, static_cast<int>(damage.physical));
	EXPECT_EQ(123, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(127, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(125, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(129, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(129, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(129, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(129, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(234, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(200, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(144, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(127, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(163, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(208, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(224, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(221, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Kite Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(128, static_cast<int>(damage.physical));
	EXPECT_EQ(109, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Knight_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(206, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(156, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(159, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(125, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(122, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(141, static_cast<int>(damage.physical));
	EXPECT_EQ(121, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(125, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(122, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(127, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(127, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(127, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(127, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(228, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(196, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(141, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(125, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(159, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(218, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(181, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Knight Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(126, static_cast<int>(damage.physical));
	EXPECT_EQ(108, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Knights_Crossbow){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Knight's Crossbow", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(140, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(140, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Large_Club){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(476, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(316, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(369, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(74, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(246, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(231, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(271, static_cast<int>(damage.physical));
	EXPECT_EQ(206, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(246, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(231, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(236, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(236, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(236, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(236, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(499, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(457, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(271, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(218, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(369, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(97, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(397, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(494, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(506, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Club", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(249, static_cast<int>(damage.physical));
	EXPECT_EQ(184, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Large_Leather_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(155, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(158, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(124, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(122, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(141, static_cast<int>(damage.physical));
	EXPECT_EQ(120, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(124, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(122, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(125, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(125, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(125, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(125, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(228, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(195, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(141, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(124, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(158, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(202, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(219, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(215, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Large Leather Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(125, static_cast<int>(damage.physical));
	EXPECT_EQ(107, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Leather_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(166, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(126, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(129, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(103, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(102, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(118, static_cast<int>(damage.physical));
	EXPECT_EQ(105, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(103, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(102, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(109, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(109, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(109, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(109, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(159, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(118, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(108, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(129, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(148, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Leather Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(103, static_cast<int>(damage.physical));
	EXPECT_EQ(93, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Ledos_Great_Hammer){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Ledo's Great Hammer", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Light_Crossbow){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Light Crossbow", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(224, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Llewellyn_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(139, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(143, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(113, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(112, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(129, static_cast<int>(damage.physical));
	EXPECT_EQ(115, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(113, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(112, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(122, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(122, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(122, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(122, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(198, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(129, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(118, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(143, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(197, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(198, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(164, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Llewellyn Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(114, static_cast<int>(damage.physical));
	EXPECT_EQ(102, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Long_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(416, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(284, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(322, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(198, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(234, static_cast<int>(damage.physical));
	EXPECT_EQ(163, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(198, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(203, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(203, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(203, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(203, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(382, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(401, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(234, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(176, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(322, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(309, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(428, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(419, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Long Sword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(146, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Longbow){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Longbow", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(241, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Lorians_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Lorian's Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(496, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(164, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Lothric_Knight_Greatshield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(303, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(217, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(235, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(61, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(172, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(167, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(194, static_cast<int>(damage.physical));
	EXPECT_EQ(162, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(172, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(167, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(177, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(177, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(345, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(289, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(194, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(168, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(235, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(71, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(288, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(320, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(264, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatshield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(174, static_cast<int>(damage.physical));
	EXPECT_EQ(144, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Lothric_Knight_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(471, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(174, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(363, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(143, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(365, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(134, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(74, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(262, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(242, static_cast<int>(damage.fire));
	EXPECT_EQ(104, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(302, static_cast<int>(damage.physical));
	EXPECT_EQ(216, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(87, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(262, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(104, static_cast<int>(damage.lightning));
	EXPECT_EQ(242, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(251, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(87, static_cast<int>(damage.lightning));
	EXPECT_EQ(251, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(251, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(251, static_cast<int>(damage.fire));
	EXPECT_EQ(87, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(455, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(174, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(453, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(165, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(255, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(288, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(365, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(134, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(98, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(340, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(174, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(476, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(174, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(498, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(174, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Greatsword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(282, static_cast<int>(damage.physical));
	EXPECT_EQ(194, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(87, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Lothric_Knight_Long_Spear){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(414, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(283, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(321, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(198, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(234, static_cast<int>(damage.physical));
	EXPECT_EQ(165, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(198, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(196, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(196, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(196, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(196, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(352, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(399, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(234, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(177, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(321, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(301, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(427, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(429, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Long Spear", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(219, static_cast<int>(damage.physical));
	EXPECT_EQ(148, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Lothric_Knight_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(218, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(164, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(169, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(131, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(129, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(149, static_cast<int>(damage.physical));
	EXPECT_EQ(127, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(131, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(129, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(135, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(135, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(135, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(135, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(243, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(208, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(149, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(131, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(169, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(215, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(233, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(191, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(133, static_cast<int>(damage.physical));
	EXPECT_EQ(113, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Lothric_Knight_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(402, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(287, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(312, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(217, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(198, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(234, static_cast<int>(damage.physical));
	EXPECT_EQ(160, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(217, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(198, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(199, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(199, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(199, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(199, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(357, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(388, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(234, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(173, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(312, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(299, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(413, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(411, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric Knight Sword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(221, static_cast<int>(damage.physical));
	EXPECT_EQ(144, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Lothric_War_Banner){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(378, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(268, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(293, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(204, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(187, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(221, static_cast<int>(damage.physical));
	EXPECT_EQ(154, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(204, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(187, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(185, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(185, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(347, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(364, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(221, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(166, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(293, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(286, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(389, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(392, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric War Banner", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(208, static_cast<int>(damage.physical));
	EXPECT_EQ(138, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Lothrics_Holy_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Lothric's Holy Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(363, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Lucerne){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(453, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(307, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(351, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(62, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(235, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(217, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(255, static_cast<int>(damage.physical));
	EXPECT_EQ(183, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(235, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(217, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(223, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(223, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(223, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(223, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(419, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(435, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(255, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(196, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(351, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(72, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(353, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(470, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(471, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Lucerne", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(239, static_cast<int>(damage.physical));
	EXPECT_EQ(164, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Mace){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(399, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(293, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(309, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(209, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(246, static_cast<int>(damage.physical));
	EXPECT_EQ(179, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(209, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(212, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(212, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(212, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(212, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(428, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(382, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(256, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(199, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(309, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(351, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(454, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(425, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Mace", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(229, static_cast<int>(damage.physical));
	EXPECT_EQ(160, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Mail_Breaker){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(243, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(181, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(188, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(144, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(140, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(162, static_cast<int>(damage.physical));
	EXPECT_EQ(135, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(144, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(140, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(142, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(142, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(142, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(142, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(219, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(233, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(162, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(140, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(188, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(200, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(239, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(253, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Mail Breaker", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(145, static_cast<int>(damage.physical));
	EXPECT_EQ(120, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Man_Serpent_Hatchet){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(433, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(293, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(336, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(209, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(246, static_cast<int>(damage.physical));
	EXPECT_EQ(179, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(209, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(212, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(212, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(212, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(212, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(410, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(416, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(246, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(191, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(336, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(325, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(425, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(444, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Man Serpent Hatchet", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(229, static_cast<int>(damage.physical));
	EXPECT_EQ(160, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Mangrubs_Staff){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Man-grub's Staff", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Manikin_Claws){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(284, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(215, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(60, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(165, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(153, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(180, static_cast<int>(damage.physical));
	EXPECT_EQ(130, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(165, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(153, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(164, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(164, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(164, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(164, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(275, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(273, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(180, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(139, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(239, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(312, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(307, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Manikin Claws", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(168, static_cast<int>(damage.physical));
	EXPECT_EQ(117, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Mendicants_Staff){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Mendicant's Staff", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(166, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Millwood_Battle_Axe){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(454, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(307, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(352, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(237, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(221, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(259, static_cast<int>(damage.physical));
	EXPECT_EQ(192, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(237, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(221, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(222, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(222, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(222, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(222, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(468, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(435, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(259, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(204, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(352, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(351, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(482, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(466, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Millwood Battle Axe", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(240, static_cast<int>(damage.physical));
	EXPECT_EQ(172, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Millwood_Greatbow){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Millwood Greatbow", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(457, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Moaning_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Moaning Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(142, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Moonlight_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Moonlight Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(143, static_cast<int>(damage.physical));
	EXPECT_EQ(142, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Morion_Blade){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Morion Blade", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(397, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(34, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Mornes_Great_Hammer){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Morne's Great Hammer", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(208, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Morning_Star){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(382, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(277, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(296, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(59, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(204, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(238, static_cast<int>(damage.physical));
	EXPECT_EQ(184, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(204, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(207, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(207, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(207, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(207, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(414, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(366, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(248, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(201, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(296, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(330, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(426, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(407, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Morning Star", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(218, static_cast<int>(damage.physical));
	EXPECT_EQ(164, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Murakumo){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(527, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(356, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(408, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(62, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(269, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(244, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(289, static_cast<int>(damage.physical));
	EXPECT_EQ(196, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(269, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(244, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(244, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(244, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(244, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(244, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(468, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(508, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(289, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(212, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(408, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(72, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(408, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(527, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(544, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Murakumo", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(274, static_cast<int>(damage.physical));
	EXPECT_EQ(176, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Murky_Hand_Scythe){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(242, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(47, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(170, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(36, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(187, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(36, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(149, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(139, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(28, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(163, static_cast<int>(damage.physical));
	EXPECT_EQ(121, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(26, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(113, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(151, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(123, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(173, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(133, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(133, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(22, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(242, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(47, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(232, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(44, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(163, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(129, static_cast<int>(damage.lightning));
	EXPECT_EQ(27, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(187, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(36, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(187, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(44, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(258, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(47, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(261, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(47, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Murky Hand Scythe", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(133, static_cast<int>(damage.physical));
	EXPECT_EQ(95, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(26, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Murky_Longstaff){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Murky Longstaff", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(318, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(28, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Notched_Whip){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(279, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(59, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(161, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(154, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(180, static_cast<int>(damage.physical));
	EXPECT_EQ(144, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(161, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(154, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(166, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(166, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(166, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(166, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(275, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(268, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(180, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(150, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(247, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(285, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(298, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Notched Whip", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(163, static_cast<int>(damage.physical));
	EXPECT_EQ(128, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Old_Kings_Great_Hammer){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Old King's Great Hammer", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(472, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(146, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Old_Wolf_Curved_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Old Wolf Curved Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(533, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Onikiri_and_Ubadachi){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(406, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(275, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(315, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(60, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(209, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(190, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(154, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(209, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(190, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(192, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(192, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(361, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(391, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(166, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(315, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(296, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(386, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(404, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Onikiri and Ubadachi", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(212, static_cast<int>(damage.physical));
	EXPECT_EQ(138, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Onislayer_Greatbow){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Onislayer Greatbow", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(348, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Onyx_Blade){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Onyx Blade", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(198, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(120, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Painting_Guardians_Curved_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(347, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(253, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(269, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(60, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(168, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(206, static_cast<int>(damage.physical));
	EXPECT_EQ(140, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(168, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(190, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(190, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(190, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(190, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(324, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(335, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(206, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(152, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(269, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(293, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(357, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(364, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Painting Guardian's Curved Sword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(195, static_cast<int>(damage.physical));
	EXPECT_EQ(126, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Parrying_Dagger){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(217, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(227, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(168, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(142, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(131, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(155, static_cast<int>(damage.physical));
	EXPECT_EQ(110, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(142, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(131, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(138, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(138, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(138, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(138, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(210, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(155, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(118, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(168, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(182, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(224, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(245, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Parrying Dagger", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(145, static_cast<int>(damage.physical));
	EXPECT_EQ(99, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Partizan){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(399, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(275, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(309, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(210, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(193, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(227, static_cast<int>(damage.physical));
	EXPECT_EQ(160, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(210, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(193, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(199, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(199, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(199, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(199, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(371, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(385, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(227, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(172, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(309, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(306, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(412, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(400, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Partizan", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(213, static_cast<int>(damage.physical));
	EXPECT_EQ(144, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Pickaxe){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(453, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(305, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(351, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(74, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(237, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(222, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(260, static_cast<int>(damage.physical));
	EXPECT_EQ(198, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(237, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(222, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(240, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(240, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(240, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(240, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(488, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(435, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(260, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(209, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(351, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(97, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(390, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(472, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(484, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Pickaxe", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(240, static_cast<int>(damage.physical));
	EXPECT_EQ(177, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Pierce_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(230, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(173, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(178, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(138, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(135, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(156, static_cast<int>(damage.physical));
	EXPECT_EQ(133, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(138, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(135, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(142, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(142, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(142, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(142, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(258, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(156, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(137, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(178, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(226, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(244, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(202, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Pierce Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(139, static_cast<int>(damage.physical));
	EXPECT_EQ(118, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Pike){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(388, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(278, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(301, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(212, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(194, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(229, static_cast<int>(damage.physical));
	EXPECT_EQ(162, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(212, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(194, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(205, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(205, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(360, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(374, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(229, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(174, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(301, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(314, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(400, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(406, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Pike", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(215, static_cast<int>(damage.physical));
	EXPECT_EQ(145, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Plank_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(127, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(104, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(98, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(85, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(85, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(97, static_cast<int>(damage.physical));
	EXPECT_EQ(88, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(85, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(85, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(83, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(83, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(83, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(83, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(134, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(121, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(97, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(89, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(98, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(137, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(136, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(113, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Plank Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(85, static_cast<int>(damage.physical));
	EXPECT_EQ(78, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Pontiff_Knight_Curved_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Pontiff Knight Curved Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(393, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Pontiff_Knight_Great_Scythe){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Pontiff Knight Great Scythe", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(402, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Pontiff_Knight_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Pontiff Knight Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(138, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Porcine_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(223, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(168, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(173, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(134, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(132, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(152, static_cast<int>(damage.physical));
	EXPECT_EQ(130, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(134, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(132, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(138, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(138, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(138, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(138, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(249, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(213, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(152, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(134, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(173, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(221, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(238, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(196, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Porcine Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(135, static_cast<int>(damage.physical));
	EXPECT_EQ(115, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Preachers_Right_Arm){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Preacher's Right Arm", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(229, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Priests_Chime){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Priest's Chime", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(141, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Profaned_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Profaned Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(605, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Pyromancers_Parting_Flame){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Pyromancer's Parting Flame", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(0, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(118, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Pyromancy_Flame){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Pyromancy Flame", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(0, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(222, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Quakestone_Hammer){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Quakestone Hammer", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(538, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Rapier){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(349, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(242, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(270, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(170, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(200, static_cast<int>(damage.physical));
	EXPECT_EQ(142, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(170, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(185, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(185, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(312, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(336, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(200, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(152, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(270, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(273, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(352, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(360, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Rapier", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(188, static_cast<int>(damage.physical));
	EXPECT_EQ(127, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Red_Hilted_Halberd){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(464, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(303, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(360, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(62, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(232, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(214, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(252, static_cast<int>(damage.physical));
	EXPECT_EQ(181, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(232, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(214, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(222, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(222, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(222, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(222, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(423, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(447, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(252, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(194, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(360, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(72, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(351, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(480, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(482, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Red Hilted Halberd", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(235, static_cast<int>(damage.physical));
	EXPECT_EQ(162, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Red_and_White_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(166, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(126, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(129, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(103, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(102, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(118, static_cast<int>(damage.physical));
	EXPECT_EQ(105, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(103, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(102, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(109, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(109, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(109, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(109, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(159, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(118, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(108, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(129, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(148, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Red and White Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(103, static_cast<int>(damage.physical));
	EXPECT_EQ(93, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Reinforced_Club){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(372, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(273, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(288, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(59, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(211, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(196, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(230, static_cast<int>(damage.physical));
	EXPECT_EQ(171, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(211, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(196, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(203, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(203, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(203, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(203, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(404, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(356, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(230, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(181, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(288, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(325, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(388, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(400, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Reinforced Club", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(214, static_cast<int>(damage.physical));
	EXPECT_EQ(153, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Repeating_Crossbow){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Repeating Crossbow", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(228, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Ricards_Rapier){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(358, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(249, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(278, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(190, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(174, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(206, static_cast<int>(damage.physical));
	EXPECT_EQ(145, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(190, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(174, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(188, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(188, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(188, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(188, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(319, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(345, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(206, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(156, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(278, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(278, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(360, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(368, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Ricard's Rapier", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(193, static_cast<int>(damage.physical));
	EXPECT_EQ(130, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Ringed_Knight_Paired_Greatswords){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Ringed Knight Paired Greatswords", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(575, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(20, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Ringed_Knight_Spear){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Ringed Knight Spear", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(393, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(23, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Ringed_Knight_Straight_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Ringed Knight Straight Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(397, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(20, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Rose_of_Ariandel){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Rose of Ariandel", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(86, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(34, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Rotten_Ghru_Curved_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(363, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(256, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(282, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(197, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(182, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(214, static_cast<int>(damage.physical));
	EXPECT_EQ(155, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(197, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(182, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(190, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(190, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(190, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(190, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(339, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(350, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(214, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(165, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(282, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(70, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(293, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(376, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(384, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Curved Sword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(200, static_cast<int>(damage.physical));
	EXPECT_EQ(139, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Rotten_Ghru_Dagger){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(228, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(236, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(149, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(137, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(162, static_cast<int>(damage.physical));
	EXPECT_EQ(116, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(149, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(137, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(146, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(146, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(146, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(146, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(222, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(232, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(162, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(124, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(70, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(249, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(257, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Dagger", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(151, static_cast<int>(damage.physical));
	EXPECT_EQ(104, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Rotten_Ghru_Spear){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(384, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(272, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(298, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(208, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(191, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(159, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(208, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(191, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(192, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(192, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(357, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(370, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(170, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(298, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(70, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(296, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(396, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(389, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Rotten Ghru Spear", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(211, static_cast<int>(damage.physical));
	EXPECT_EQ(142, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Round_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(207, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(153, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(161, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(123, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(120, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(139, static_cast<int>(damage.physical));
	EXPECT_EQ(119, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(123, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(120, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(127, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(127, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(127, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(127, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(231, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(198, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(139, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(122, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(161, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(221, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(218, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Round Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(124, static_cast<int>(damage.physical));
	EXPECT_EQ(105, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Sacred_Bloom_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Sacred Bloom Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(175, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Sacred_Chime_of_Filianore){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Sacred Chime of Filianore", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(157, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Sages_Crystal_Staff){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Sage's Crystal Staff", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(186, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Saint_Bident){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(117, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(84, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(91, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(71, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(74, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(82, static_cast<int>(damage.physical));
	EXPECT_EQ(149, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(71, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(74, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(119, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(119, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(119, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(119, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(108, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(111, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(72, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(72, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(91, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(184, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(105, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(108, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Saint Bident", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(69, static_cast<int>(damage.physical));
	EXPECT_EQ(133, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Saints_Talisman){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Saint's Talisman", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(147, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Sainttree_Bellvine){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Saint-tree Bellvine", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(141, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Scholars_Candlestick){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Scholar's Candlestick", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(224, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Scimitar){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(353, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(257, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(274, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(189, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(171, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(210, static_cast<int>(damage.physical));
	EXPECT_EQ(143, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(189, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(171, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(194, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(194, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(194, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(194, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(315, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(341, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(210, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(155, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(274, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(299, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(365, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(369, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Scimitar", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(198, static_cast<int>(damage.physical));
	EXPECT_EQ(128, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Sellsword_Twinblades){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(349, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(246, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(271, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(189, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(175, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(206, static_cast<int>(damage.physical));
	EXPECT_EQ(149, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(189, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(175, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(183, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(183, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(183, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(183, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(326, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(336, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(206, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(159, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(271, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(270, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(361, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(369, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Sellsword Twinblades", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(133, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Shield_of_Want){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Shield of Want", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(251, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Short_Bow){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Short Bow", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(228, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Shortsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(387, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(275, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(300, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(209, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(190, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(154, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(209, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(190, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(192, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(192, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(343, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(373, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(166, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(300, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(283, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(397, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(391, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Shortsword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(212, static_cast<int>(damage.physical));
	EXPECT_EQ(138, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Shotel){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(367, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(246, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(284, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(198, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(184, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(156, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(198, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(184, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(183, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(183, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(183, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(183, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(319, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(353, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(167, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(284, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(283, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(369, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(372, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Shotel", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(133, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Silver_Eagle_Kite_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(229, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(172, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(138, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(135, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(156, static_cast<int>(damage.physical));
	EXPECT_EQ(134, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(138, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(135, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(144, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(144, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(144, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(144, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(254, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(219, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(156, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(138, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(228, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(243, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(201, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Silver Eagle Kite Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(139, static_cast<int>(damage.physical));
	EXPECT_EQ(119, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Silver_Knight_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Silver Knight Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(227, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Small_Leather_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(169, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(125, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(131, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(101, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(101, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(116, static_cast<int>(damage.physical));
	EXPECT_EQ(104, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(101, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(101, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(111, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(111, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(111, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(111, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(180, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(161, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(116, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(106, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(131, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(182, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(182, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(172, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Small Leather Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(102, static_cast<int>(damage.physical));
	EXPECT_EQ(92, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Smoughs_Great_Hammer){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Smough's Great Hammer", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(214, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Sniper_Crossbow){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Sniper Crossbow", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(245, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Soldering_Iron){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Soldering Iron", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(132, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(192, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Sorcerers_Staff){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Sorcerer's Staff", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(163, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Spear){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(384, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(264, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(298, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(202, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(185, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(219, static_cast<int>(damage.physical));
	EXPECT_EQ(154, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(202, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(185, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(192, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(192, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(357, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(370, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(219, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(166, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(298, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(296, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(396, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(400, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Spear", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(138, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Spider_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(231, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(173, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(139, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(136, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(157, static_cast<int>(damage.physical));
	EXPECT_EQ(134, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(139, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(136, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(144, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(144, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(144, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(144, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(258, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(157, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(138, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(228, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(247, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(203, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Spider Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(140, static_cast<int>(damage.physical));
	EXPECT_EQ(119, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Spiked_Mace){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(485, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(43, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(323, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(43, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(376, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(74, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(251, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(235, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(43, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(275, static_cast<int>(damage.physical));
	EXPECT_EQ(208, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(43, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(251, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(235, static_cast<int>(damage.dark));
	EXPECT_EQ(43, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(242, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(242, static_cast<int>(damage.dark));
	EXPECT_EQ(43, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(242, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(242, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(43, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(523, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(43, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(466, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(43, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(275, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(220, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(43, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(376, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(43, static_cast<int>(status.bleed));
	EXPECT_EQ(97, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(405, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(43, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(507, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(43, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(523, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(43, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Mace", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(254, static_cast<int>(damage.physical));
	EXPECT_EQ(186, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(43, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Spiked_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(226, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(170, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(175, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(59, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(136, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(133, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(154, static_cast<int>(damage.physical));
	EXPECT_EQ(131, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(136, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(133, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(140, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(140, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(140, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(140, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(252, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(215, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(154, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(135, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(175, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(223, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(241, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(198, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Spiked Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(137, static_cast<int>(damage.physical));
	EXPECT_EQ(117, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Spirit_Tree_Crest_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Spirit Tree Crest Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Splitleaf_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(460, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(332, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(357, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(61, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(255, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(236, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(278, static_cast<int>(damage.physical));
	EXPECT_EQ(202, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(255, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(236, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(238, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(238, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(238, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(238, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(510, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(442, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(278, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(216, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(357, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(72, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(400, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(503, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(515, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Splitleaf Greatsword", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(259, static_cast<int>(damage.physical));
	EXPECT_EQ(181, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Spotted_Whip){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Spotted Whip", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(300, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(36, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Stone_Greatshield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(316, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(219, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(237, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(61, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(174, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(168, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(195, static_cast<int>(damage.physical));
	EXPECT_EQ(162, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(174, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(168, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(177, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(177, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(349, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(292, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(195, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(168, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(237, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(71, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(288, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(325, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(266, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Greatshield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(175, static_cast<int>(damage.physical));
	EXPECT_EQ(144, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Stone_Parma){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(247, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(184, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(191, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(147, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(144, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(167, static_cast<int>(damage.physical));
	EXPECT_EQ(142, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(147, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(144, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(155, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(155, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(155, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(155, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(275, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(236, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(167, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(147, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(191, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(244, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(263, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Stone Parma", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(148, static_cast<int>(damage.physical));
	EXPECT_EQ(126, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Storm_Curved_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Storm Curved Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(370, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Storm_Ruler){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Storm Ruler", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(485, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Storytellers_Staff){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Storyteller's Staff", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(165, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Sunless_Talisman){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunless Talisman", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(157, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Sunlight_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(215, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(162, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(167, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(130, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(127, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(147, static_cast<int>(damage.physical));
	EXPECT_EQ(126, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(130, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(127, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(133, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(133, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(133, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(133, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(240, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(147, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(129, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(167, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(213, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(230, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(189, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(131, static_cast<int>(damage.physical));
	EXPECT_EQ(112, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Sunlight_Straight_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Straight Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(117, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Sunlight_Talisman){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunlight Talisman", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(147, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Sunset_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(215, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(162, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(167, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(130, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(127, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(147, static_cast<int>(damage.physical));
	EXPECT_EQ(126, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(130, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(127, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(133, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(133, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(133, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(133, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(240, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(147, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(129, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(167, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(213, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(230, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(189, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Sunset Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(131, static_cast<int>(damage.physical));
	EXPECT_EQ(112, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Tailbone_Short_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Tailbone Short Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(255, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Tailbone_Spear){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Tailbone Spear", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(354, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Talisman){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Talisman", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(141, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Target_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(166, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(126, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(129, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(103, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(102, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(118, static_cast<int>(damage.physical));
	EXPECT_EQ(105, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(103, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(102, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(109, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(109, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(109, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(109, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(177, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(159, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(118, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(108, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(129, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(147, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Target Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(103, static_cast<int>(damage.physical));
	EXPECT_EQ(93, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Thrall_Axe){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(384, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(272, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(298, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(208, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(191, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(159, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(208, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(191, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(192, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(192, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(348, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(370, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(170, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(298, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(283, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(388, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(368, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Thrall Axe", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(211, static_cast<int>(damage.physical));
	EXPECT_EQ(142, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Torch){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Torch", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(95, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(160, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Twin_Dragon_Greatshield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(289, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(207, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(224, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(61, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(165, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(160, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(155, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(165, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(160, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(168, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(168, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(168, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(168, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(329, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(276, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(185, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(160, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(224, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(71, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(275, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(306, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(252, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Twin Dragon Greatshield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(166, static_cast<int>(damage.physical));
	EXPECT_EQ(138, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Twin_Princes_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Twin Princes' Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(377, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(170, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Uchigatana){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(386, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(255, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(299, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(60, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(196, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(183, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(215, static_cast<int>(damage.physical));
	EXPECT_EQ(160, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(196, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(183, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(194, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(194, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(194, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(194, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(345, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(372, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(215, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(170, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(299, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(286, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(378, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(396, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Uchigatana", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(199, static_cast<int>(damage.physical));
	EXPECT_EQ(143, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Valorheart){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Valorheart", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(386, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Vordts_Great_Hammer){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Vordt's Great Hammer", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(524, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(110, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Warden_Twinblades){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(334, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(236, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(259, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(60, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(181, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(167, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(196, static_cast<int>(damage.physical));
	EXPECT_EQ(140, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(181, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(167, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(172, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(172, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(172, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(172, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(309, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(322, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(196, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(150, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(259, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(254, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(338, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(347, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Warden Twinblades", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(183, static_cast<int>(damage.physical));
	EXPECT_EQ(126, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Wargod_Wooden_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(231, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(173, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(139, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(136, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(157, static_cast<int>(damage.physical));
	EXPECT_EQ(134, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(139, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(136, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(144, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(144, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(144, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(144, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(258, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(220, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(157, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(138, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(228, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(247, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(203, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Wargod Wooden Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(140, static_cast<int>(damage.physical));
	EXPECT_EQ(119, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Warpick){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(392, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(288, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(303, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(221, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(205, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(241, static_cast<int>(damage.physical));
	EXPECT_EQ(176, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(221, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(205, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(209, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(209, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(209, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(209, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(429, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(375, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(241, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(188, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(303, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(332, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(446, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(454, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Warpick", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(158, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Warriors_Round_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(179, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(135, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(138, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(109, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(109, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(125, static_cast<int>(damage.physical));
	EXPECT_EQ(112, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(109, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(109, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(118, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(118, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(118, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(118, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(190, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(170, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(125, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(114, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(138, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(159, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Warrior's Round Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(110, static_cast<int>(damage.physical));
	EXPECT_EQ(99, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Washing_Pole){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(407, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(257, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(315, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(60, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(198, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(185, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(217, static_cast<int>(damage.physical));
	EXPECT_EQ(161, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(198, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(185, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(192, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(192, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(192, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(363, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(391, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(217, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(171, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(315, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(283, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(398, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(407, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Washing Pole", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(201, static_cast<int>(damage.physical));
	EXPECT_EQ(144, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(30, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Whip){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(293, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(218, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(227, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(169, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(159, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(186, static_cast<int>(damage.physical));
	EXPECT_EQ(141, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(169, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(159, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(173, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(173, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(173, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(173, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(293, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(282, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(186, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(149, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(227, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(257, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(307, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(324, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Whip", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(172, static_cast<int>(damage.physical));
	EXPECT_EQ(126, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, White_Birch_Bow){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "White Birch Bow", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(227, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, White_Hair_Talisman){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "White Hair Talisman", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(154, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(82, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Winged_Knight_Halberd){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(460, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(332, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(356, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(61, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(258, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(243, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(285, static_cast<int>(damage.physical));
	EXPECT_EQ(218, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(258, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(243, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(246, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(246, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(246, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(246, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(498, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(441, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(285, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(230, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(356, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(71, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(410, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(512, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(501, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Halberd", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(262, static_cast<int>(damage.physical));
	EXPECT_EQ(195, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Winged_Knight_Twinaxes){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(423, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(280, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(328, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(200, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(235, static_cast<int>(damage.physical));
	EXPECT_EQ(172, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(216, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(200, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(210, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(210, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(210, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(210, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(400, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(406, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(235, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(183, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(328, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(314, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(428, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(403, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Knight Twinaxes", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(219, static_cast<int>(damage.physical));
	EXPECT_EQ(154, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Winged_Spear){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(389, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(278, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(301, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(52, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(210, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(189, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(150, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(210, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(189, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(194, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(194, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(194, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(194, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(364, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(375, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(225, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(163, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(301, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(58, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(299, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(400, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(404, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Winged Spear", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(214, static_cast<int>(damage.physical));
	EXPECT_EQ(135, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Witchs_Locks){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Witch's Locks", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(183, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(84, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Witchtree_Branch){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Witchtree Branch", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(156, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Wolf_Knights_Greatshield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Wolf Knight's Greatshield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(297, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Wolf_Knights_Greatsword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Wolf Knight's Greatsword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(523, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Wolnirs_Holy_Sword){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Wolnir's Holy Sword", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(440, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Wooden_Shield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(205, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(155, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(158, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(51, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(124, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(122, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(141, static_cast<int>(damage.physical));
	EXPECT_EQ(120, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(124, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(122, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(125, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(125, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(125, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(125, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(228, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(195, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(141, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(124, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(158, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(57, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(202, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(219, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(215, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Wooden Shield", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(125, static_cast<int>(damage.physical));
	EXPECT_EQ(107, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Yhorms_Great_Machete){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Yhorm's Great Machete", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(590, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Yhorms_Greatshield){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Yhorm's Greatshield", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(330, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Yorshkas_Chime){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Yorshka's Chime", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(149, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Yorshkas_Spear){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Yorshka's Spear", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(379, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}

TEST_F(Quality_40_40_11_15_7, Zweihander){
	{
	SCOPED_TRACE("None");
	const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::None, 10, attribs);
	EXPECT_EQ(548, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blessed");
	const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Blessed, 10, attribs);
	EXPECT_EQ(376, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Blood");
	const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Blood, 10, attribs);
	EXPECT_EQ(425, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(74, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Chaos");
	const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Chaos, 10, attribs);
	EXPECT_EQ(286, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(262, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Crystal");
	const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Crystal, 10, attribs);
	EXPECT_EQ(309, static_cast<int>(damage.physical));
	EXPECT_EQ(215, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Dark");
	const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Dark, 10, attribs);
	EXPECT_EQ(286, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(262, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Deep");
	const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Deep, 10, attribs);
	EXPECT_EQ(244, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(244, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Fire");
	const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Fire, 10, attribs);
	EXPECT_EQ(244, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(244, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Heavy");
	const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Heavy, 10, attribs);
	EXPECT_EQ(519, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Hollow");
	const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Hollow, 10, attribs);
	EXPECT_EQ(528, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Lightning");
	const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Lightning, 10, attribs);
	EXPECT_EQ(309, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(232, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Poison");
	const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Poison, 10, attribs);
	EXPECT_EQ(425, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(98, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Raw");
	const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Raw, 10, attribs);
	EXPECT_EQ(408, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Refined");
	const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Refined, 10, attribs);
	EXPECT_EQ(550, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Sharp");
	const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Sharp, 10, attribs);
	EXPECT_EQ(535, static_cast<int>(damage.physical));
	EXPECT_EQ(0, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
	{
	SCOPED_TRACE("Simple");
	const auto& [damage, status] = calculator::AttackRating(db, "Zweihander", Weapon::Infusion::Simple, 10, attribs);
	EXPECT_EQ(291, static_cast<int>(damage.physical));
	EXPECT_EQ(193, static_cast<int>(damage.magic));
	EXPECT_EQ(0, static_cast<int>(damage.fire));
	EXPECT_EQ(0, static_cast<int>(damage.lightning));
	EXPECT_EQ(0, static_cast<int>(damage.dark));
	EXPECT_EQ(0, static_cast<int>(status.bleed));
	EXPECT_EQ(0, static_cast<int>(status.poison));
	EXPECT_EQ(0, static_cast<int>(status.frost));
	}
}